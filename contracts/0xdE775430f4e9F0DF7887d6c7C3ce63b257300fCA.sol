contract main {




// =====================  Runtime code  =====================


#
#  - sub_ecca1fad(?)
#
address owner;
address stor1;
address stor2;
address stor3;
uint256 stor3;

function owner() {
    return owner
}

function selfDestruct() {
    require msg.sender == owner
    selfdestruct(owner)
}

function _fallback() payable {
    revert
}

function transferOwnership(address arg1) {
    require msg.sender == owner
    require arg1
    emit OwnershipTransferred(owner, arg1);
    owner = arg1
}

function updateDependencies() {
    if stor1 != msg.sender:
        revert with 0, 'Error: Coordinator Only Function'
    require ext_code.size(stor2)
    call stor2.0x35817773 with:
         gas gas_remaining wei
        args Array(len=8, data='REGISTRY')
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    uint256(stor3) = ext_call.return_data[12 len 20] or Mask(96, 160, uint256(stor3))
}

function sub_c1ca69c4(?) {
    mem[100] = arg1
    mem[132] = arg2
    require ext_code.size(address(stor3))
    call address(stor3).0x87cd29a4 with:
         gas gas_remaining wei
        args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = ext_call.return_data[0]
    if ext_call.return_data[0]:
        mem[128 len 32 * ext_call.return_data[0]] = code.data[4486 len 32 * ext_call.return_data[0]]
    mem[(32 * ext_call.return_data[0]) + 128] = 0x2316a9ff00000000000000000000000000000000000000000000000000000000
    mem[(32 * ext_call.return_data[0]) + 132] = arg1
    mem[(32 * ext_call.return_data[0]) + 164] = arg2
    require ext_code.size(address(stor3))
    call address(stor3).0x2316a9ff with:
         gas gas_remaining wei
        args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(32 * ext_call.return_data[0]) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (32 * ext_call.return_data[0]) + ceil32(return_data.size) + 128
    require return_data.size >= 32
    require mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 <= 4294967296
    require mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + 32 <= return_data.size
    require mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128] <= 4294967296 and mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]) + 32 <= return_data.size
    require ext_call.return_data[0] - 1 < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]
    mem[(32 * ext_call.return_data[0]) + ceil32(return_data.size) + 128] = mem[(32 * ext_call.return_data[0] - 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]
    return memory
      from (32 * ext_call.return_data[0]) + ceil32(return_data.size) + 128
       len 32
}

function sub_197d66d5(?) {
    mem[100] = arg1
    mem[132] = arg2
    require ext_code.size(address(stor3))
    call address(stor3).0x87cd29a4 with:
         gas gas_remaining wei
        args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    mem[96] = ext_call.return_data[0]
    if ext_call.return_data[0]:
        mem[128 len 32 * ext_call.return_data[0]] = code.data[4486 len 32 * ext_call.return_data[0]]
    mem[(32 * ext_call.return_data[0]) + 128] = 0x2316a9ff00000000000000000000000000000000000000000000000000000000
    mem[(32 * ext_call.return_data[0]) + 132] = arg1
    mem[(32 * ext_call.return_data[0]) + 164] = arg2
    require ext_code.size(address(stor3))
    call address(stor3).0x2316a9ff with:
         gas gas_remaining wei
        args address(arg1), arg2
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    mem[(32 * ext_call.return_data[0]) + 128 len return_data.size] = ext_call.return_data[0 len return_data.size]
    mem[64] = (32 * ext_call.return_data[0]) + ceil32(return_data.size) + 128
    require return_data.size >= 32
    require mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 <= 4294967296
    require mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + 32 <= return_data.size
    require mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128] <= 4294967296 and mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]) + 32 <= return_data.size
    require mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128] - 1 < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]
    if arg3 + arg4 > mem[(32 * mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128] - 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]:
        revert with 0, 'Error: Function not in dot limit'
    s = 0
    s = 0
    s = 0
    idx = 0
    while idx < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
        require idx < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]
        require idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1 < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]
        if arg3 > mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]:
            s = idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 2
            s = mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]
            s = mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]
            idx = idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 2
            continue 
        require idx < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]
        if arg3 + arg4 > mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]:
            s = idx + 1
            t = 0
            while s < idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1:
                if s + -idx - 1 > 6:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 < 0:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 > 6:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 < 0:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if not s + -idx - 1:
                    if not s + -idx - 1:
                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                            s = s + 1
                            t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                            continue 
                    else:
                        if s + -idx - 1 == 1:
                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                s = s + 1
                                t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                continue 
                        else:
                            if s + -idx - 1 == 2:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 3:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 4:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 5:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 != 6:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                else:
                    if s + -idx - 1 == 1:
                        if not s + -idx - 1:
                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                s = s + 1
                                t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                continue 
                        else:
                            if s + -idx - 1 == 1:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 2:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 3:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 4:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 5:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 != 6:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -arg3 + (arg3 * arg3) / 2)
                                                        continue 
                                                else:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                    else:
                        if s + -idx - 1 == 2:
                            if not s + -idx - 1:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 1:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 2:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 3:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 4:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 5:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 != 6:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6)
                                                            continue 
                                                    else:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                        else:
                            if s + -idx - 1 == 3:
                                if not s + -idx - 1:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 1:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 2:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 3:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 4:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 5:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 != 6:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (-arg3 + (arg3 * arg3) / 2)^2)
                                                                continue 
                                                        else:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                            else:
                                if s + -idx - 1 == 4:
                                    if not s + -idx - 1:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 1:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 2:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 3:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 4:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 5:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 != 6:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30)
                                                                    continue 
                                                            else:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                else:
                                    if s + -idx - 1 == 5:
                                        if not s + -idx - 1:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 2:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 3:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 4:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 5:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 != 6:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                    else:
                                        if s + -idx - 1 != 6:
                                            if not s + -idx - 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 1:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 2:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6)
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 3:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2)
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 4:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30)
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 == 5:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s + -idx - 1 != 6:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t
                                                                            continue 
                                                                    else:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42)
                                                                            continue 
                                        else:
                                            if not s + -idx - 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 1:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 2:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 3:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 4:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (-mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 == 5:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t - ((mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^2 * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s + -idx - 1 != 6:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42)
                                                                            continue 
                                                                    else:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^4 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (6 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]^3 * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (3 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * 2 * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                            continue 
                ('ge', ('var', 1), ('mem', ('range', ('add', 128, ('data', ('mem', ('range', ('add', 128, ('mask_shl', 251, 0, 5, ('ext_call.return_data', 0, 32))), 4)), ('mask_shl', 160, 0, 64, ('param', 'arg1'))), ('mask_shl', 251, 0, 5, ('ext_call.return_data', 0, 32))), 32)))
                revert
        else:
            s = idx + 1
            t = 0
            while s < idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1:
                if s + -idx - 1 > 6:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 < 0:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 > 6:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if s + -idx - 1 < 0:
                    revert with 0, 'Error: Invalid Piecewise Logic'
                if not s + -idx - 1:
                    if not s + -idx - 1:
                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                            s = s + 1
                            t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                            continue 
                    else:
                        if s + -idx - 1 == 1:
                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                s = s + 1
                                t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                continue 
                        else:
                            if s + -idx - 1 == 2:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 3:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 4:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 5:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 != 6:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                else:
                    if s + -idx - 1 == 1:
                        if not s + -idx - 1:
                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                s = s + 1
                                t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                continue 
                        else:
                            if s + -idx - 1 == 1:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 2:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 3:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 4:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 5:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 != 6:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -arg3 + (arg3 * arg3) / 2)
                                                        continue 
                                                else:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 + (arg3 * arg3) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                    else:
                        if s + -idx - 1 == 2:
                            if not s + -idx - 1:
                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                    s = s + 1
                                    t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                    continue 
                            else:
                                if s + -idx - 1 == 1:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 2:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 3:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 4:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 5:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 != 6:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6)
                                                            continue 
                                                    else:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (-arg3 - (2 * arg3 - 1 * arg3) + (arg3 * arg3) + (2 * arg3 - 1 * arg3 * arg3) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                        else:
                            if s + -idx - 1 == 3:
                                if not s + -idx - 1:
                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                        s = s + 1
                                        t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                        continue 
                                else:
                                    if s + -idx - 1 == 1:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 2:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 3:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 4:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 5:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 != 6:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (-arg3 + (arg3 * arg3) / 2)^2)
                                                                continue 
                                                        else:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((-arg3 + (arg3 * arg3) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                            else:
                                if s + -idx - 1 == 4:
                                    if not s + -idx - 1:
                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                            s = s + 1
                                            t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                            continue 
                                    else:
                                        if s + -idx - 1 == 1:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 2:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 3:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 4:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 5:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 != 6:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30)
                                                                    continue 
                                                            else:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (arg3 + (3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) - (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3) - (arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) - (2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                else:
                                    if s + -idx - 1 == 5:
                                        if not s + -idx - 1:
                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                s = s + 1
                                                t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                continue 
                                        else:
                                            if s + -idx - 1 == 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 2:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 3:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 4:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 5:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 != 6:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + ((-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * (arg3 - 1)^2 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - (2 * arg3 - 1 * (-arg3 + (arg3 * arg3))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                    else:
                                        if s + -idx - 1 != 6:
                                            if not s + -idx - 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 1:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 2:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6)
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 3:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2)
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 4:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * -arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30)
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 == 5:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s + -idx - 1 != 6:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t
                                                                            continue 
                                                                    else:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t + (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42)
                                                                            continue 
                                        else:
                                            if not s + -idx - 1:
                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                    s = s + 1
                                                    t = t + (arg3 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (arg4 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                    continue 
                                            else:
                                                if s + -idx - 1 == 1:
                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                        s = s + 1
                                                        t = t + (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                        continue 
                                                else:
                                                    if s + -idx - 1 == 2:
                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                            s = s + 1
                                                            t = t + (arg3 + (2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + arg4 + (2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) / 6 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                            continue 
                                                    else:
                                                        if s + -idx - 1 == 3:
                                                            if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                s = s + 1
                                                                t = t + ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4) / 2)^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                continue 
                                                        else:
                                                            if s + -idx - 1 == 4:
                                                                if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                    s = s + 1
                                                                    t = t + (-arg3 + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) + (3 * arg3 * arg3) + (3 * arg4 * arg3) - (2 * arg3 + arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3) - (arg3 * arg3) + (3 * arg3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3 * arg3) + (3 * arg3 * arg4 * arg3 * arg3) + (3 * arg4 * arg4 * arg3 * arg3) + (3 * arg3 * arg3 * arg3) + (3 * arg4 * arg3 * arg3) - (2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) - (arg4 * arg3) + (3 * arg3 * arg3 * arg4 * arg3) + (3 * arg4 * arg3 * arg4 * arg3) + (3 * arg3 * arg4 * arg4 * arg3) + (3 * arg4 * arg4 * arg4 * arg3) + (3 * arg3 * arg4 * arg3) + (3 * arg4 * arg4 * arg3) - (2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) - arg4 + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) + (3 * arg3 * arg4) + (3 * arg4 * arg4) - (2 * arg3 + arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4) - (arg3 * arg4) + (3 * arg3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg3 * arg4) + (3 * arg3 * arg4 * arg3 * arg4) + (3 * arg4 * arg4 * arg3 * arg4) + (3 * arg3 * arg3 * arg4) + (3 * arg4 * arg3 * arg4) - (2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) - (arg4 * arg4) + (3 * arg3 * arg3 * arg4 * arg4) + (3 * arg4 * arg3 * arg4 * arg4) + (3 * arg3 * arg4 * arg4 * arg4) + (3 * arg4 * arg4 * arg4 * arg4) + (3 * arg3 * arg4 * arg4) + (3 * arg4 * arg4 * arg4) - (2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) + (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 30 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                    continue 
                                                            else:
                                                                if s + -idx - 1 == 5:
                                                                    if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                        s = s + 1
                                                                        t = t - ((arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * (arg3 + arg4)^2 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) + (2 * arg3 + arg4 * (arg3 + (arg3 * arg3) + (arg4 * arg3) + arg4 + (arg3 * arg4) + (arg4 * arg4))^2 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                        continue 
                                                                else:
                                                                    if s + -idx - 1 != 6:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t - (mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] * (4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42)
                                                                            continue 
                                                                    else:
                                                                        if s < mem[mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 128]:
                                                                            s = s + 1
                                                                            t = t + (arg3 + (3 * (arg3 + arg4)^4 * arg3) + (6 * (arg3 + arg4)^3 * arg3) - (3 * arg3 * arg3) - (3 * arg4 * arg3) + (2 * arg3 + arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3) + (arg3 * arg3) + (3 * (arg3 + arg4)^4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) - (3 * arg4 * arg3 * arg3) + (2 * arg3 + arg4 * arg3 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg3) + (arg4 * arg3) + (3 * (arg3 + arg4)^4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * arg4 * arg3) - (3 * arg3 * arg4 * arg3) - (3 * arg4 * arg4 * arg3) + (2 * arg3 + arg4 * arg4 * arg3) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg3) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg3) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg3) + arg4 + (3 * (arg3 + arg4)^4 * arg4) + (6 * (arg3 + arg4)^3 * arg4) - (3 * arg3 * arg4) - (3 * arg4 * arg4) + (2 * arg3 + arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4) + (arg3 * arg4) + (3 * (arg3 + arg4)^4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * arg3 * arg4) - (3 * arg3 * arg3 * arg4) - (3 * arg4 * arg3 * arg4) + (2 * arg3 + arg4 * arg3 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg3 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg3 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg3 * arg4) + (arg4 * arg4) + (3 * (arg3 + arg4)^4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * arg4 * arg4) - (3 * arg3 * arg4 * arg4) - (3 * arg4 * arg4 * arg4) + (2 * arg3 + arg4 * arg4 * arg4) + (3 * (arg3 + arg4)^4 * 2 * arg3 + arg4 * arg4 * arg4) + (6 * (arg3 + arg4)^3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg3 * 2 * arg3 + arg4 * arg4 * arg4) - (3 * arg4 * 2 * arg3 + arg4 * arg4 * arg4) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]) - ((4 * -arg3) - (3 * (arg3 - 1)^4 * arg3) - (6 * (arg3 - 1)^3 * arg3) + (3 * arg3 * arg3) + (4 * -1 * 2 * arg3 - 1 * arg3) - (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3) - (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3) + (3 * arg3 * 2 * arg3 - 1 * arg3) + (4 * arg3 * arg3) + (3 * (arg3 - 1)^4 * arg3 * arg3) + (6 * (arg3 - 1)^3 * arg3 * arg3) - (3 * arg3 * arg3 * arg3) + (4 * 2 * arg3 - 1 * arg3 * arg3) + (3 * (arg3 - 1)^4 * 2 * arg3 - 1 * arg3 * arg3) + (6 * (arg3 - 1)^3 * 2 * arg3 - 1 * arg3 * arg3) - (3 * arg3 * 2 * arg3 - 1 * arg3 * arg3) / 42 * mem[(32 * s) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160])
                                                                            continue 
                ('ge', ('var', 1), ('mem', ('range', ('add', 128, ('data', ('mem', ('range', ('add', 128, ('mask_shl', 251, 0, 5, ('ext_call.return_data', 0, 32))), 4)), ('mask_shl', 160, 0, 64, ('param', 'arg1'))), ('mask_shl', 251, 0, 5, ('ext_call.return_data', 0, 32))), 32)))
                revert
        if t < 0:
            revert with 0, 'Error: Cost must be greater than zero'
        if arg3 + arg4 > mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]:
            s = idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 2
            s = mem[(32 * idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 1) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]
            s = mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160]
            idx = idx + mem[(32 * idx) + mem[(32 * ext_call.return_data[0]) + 128 len 4], address(arg1) << 64 + (32 * ext_call.return_data[0]) + 160] + 2
            continue 
        if t < 0:
            revert with 0, 'Error: Cost of dots cannot be negative'
        return t
    return 0
}



}

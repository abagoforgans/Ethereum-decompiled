contract main {


// =======================  Init code  ======================


uint8 stor0; offset 160
uint256 stor5;
uint256 stor6;
uint256 stor7;
uint256 stor8;
uint256 stor9;
uint256 stor10;
uint256 stor11;
uint256 stor12;
uint256 stor13;
uint256 stor14;
uint256 stor15;
uint256 stor16;
uint256 stor17;

function _fallback() payable {
    stor0 = 0
    stor5 = 21 * 10^9
    stor6 = 40000
    stor7 = 21000
    stor8 = 21000
    stor9 = 21000
    stor10 = 21000
    stor11 = 21000
    stor12 = 21000
    stor13 = 21000
    stor14 = 21000
    stor15 = 21000
    stor16 = 21000
    stor17 = 21000
    return code.data[106 len 11412]
}



// =====================  Runtime code  =====================


#
#  - transferToICAPWithReference(bytes32 arg1, uint256 arg2, string arg3)
#
address stor0;
uint256 stor0;
address multiAssetAddress;
uint256 stor1;
uint256 symbol;
uint8 stor3; offset 160
address ambiCAddress;
uint256 stor3;
uint256 name;
uint256 txGasPriceLimit;
uint256 refundGas;
uint256 transferCallGas;
uint256 transferWithReferenceCallGas;
uint256 transferFromCallGas;
uint256 transferFromWithReferenceCallGas;
uint256 transferToICAPCallGas;
uint256 transferToICAPWithReferenceCallGas;
uint256 transferFromToICAPCallGas;
uint256 transferFromToICAPWithReferenceCallGas;
uint256 approveCallGas;
uint256 forwardCallGas;
uint256 setCosignerCallGas;
uint256 absMinFee;
uint256 feePercent;
uint256 absMaxFee;
address treasuryAddress;
uint256 stor21;
uint8 stor22; offset 160
uint32 stor22;
address feeAddress;
uint256 stor22;
mapping of address allowedForwards;

function multiAsset() payable {
    return address(multiAssetAddress)
}

function name() payable {
    return name
}

function setCosignerCallGas() payable {
    return setCosignerCallGas
}

function transferFromToICAPCallGas() payable {
    return transferFromToICAPCallGas
}

function txGasPriceLimit() payable {
    return txGasPriceLimit
}

function approveCallGas() payable {
    return approveCallGas
}

function feeAddress() payable {
    return feeAddress
}

function absMaxFee() payable {
    return absMaxFee
}

function refundGas() payable {
    return refundGas
}

function ambiC() payable {
    return ambiCAddress
}

function transferToICAPWithReferenceCallGas() payable {
    return transferToICAPWithReferenceCallGas
}

function transferFromCallGas() payable {
    return transferFromCallGas
}

function treasury() payable {
    return address(treasuryAddress)
}

function forwardCallGas() payable {
    return forwardCallGas
}

function isImmortal() payable {
    return bool(uint8(stor3.field_160))
}

function transferFromWithReferenceCallGas() payable {
    return transferFromWithReferenceCallGas
}

function feePercent() payable {
    return feePercent
}

function allowedForwards(bytes32 arg1) payable {
    return address(allowedForwards[arg1])
}

function symbol() payable {
    return symbol
}

function transferWithReferenceCallGas() payable {
    return transferWithReferenceCallGas
}

function transferFromToICAPWithReferenceCallGas() payable {
    return transferFromToICAPWithReferenceCallGas
}

function absMinFee() payable {
    return absMinFee
}

function transferToICAPCallGas() payable {
    return transferToICAPCallGas
}

function transferCallGas() payable {
    return transferCallGas
}

function remove() payable {
    if ambiCAddress != 0:
        call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
             gas gas_remaining - 25050 wei
            args name, 0x6f776e6572000000000000000000000000000000000000000000000000000000, msg.sender
        require ext_call.success
        if ext_call.return_data[0]:
            if not uint8(stor3.field_160):
                selfdestruct(msg.sender)
            else:
                return 0
        else:
            return 0
    else:
        return 0
}

function setupStackDepthLib(address arg1) payable {
    if address(stor0) != 0:
        return 0
    uint256(stor0) = arg1 or Mask(96, 160, uint256(stor0))
    return 1
}

function totalSupply() payable {
    call address(multiAssetAddress).totalSupply(bytes32 rg1) with:
         gas gas_remaining - 25050 wei
        args symbol
    require ext_call.success
    return ext_call.return_data[0]
}

function calculateFee(uint256 arg1) payable {
    if arg1 * feePercent / 10000 < absMinFee:
        return absMinFee
    if arg1 * feePercent / 10000 <= absMaxFee:
        return (arg1 * feePercent / 10000)
    return absMaxFee
}

function getAddress(bytes32 arg1) payable {
    call ambiCAddress.getNodeAddress(bytes32 rg1) with:
         gas gas_remaining - 25050 wei
        args arg1
    require ext_call.success
    return ext_call.return_data[12 len 20]
}

function balanceOf(address arg1) payable {
    call address(multiAssetAddress).balanceOf(address rg1, bytes32 rg2) with:
         gas gas_remaining - 25050 wei
        args address(arg1), symbol
    require ext_call.success
    return ext_call.return_data[0]
}

function emitApprove(address arg1, address arg2, uint256 arg3) payable {
    if msg.sender == address(multiAssetAddress):
        emit Approve(arg3, arg1, arg2);
        if not uint8(stor22.field_160):
            if feeAddress != 0:
                require arg2 == this.address
}

function allowance(address arg1, address arg2) payable {
    call address(multiAssetAddress).allowance(address rg1, address rg2, bytes32 rg3) with:
         gas gas_remaining - 25050 wei
        args address(arg1), address(arg2), symbol
    require ext_call.success
    return ext_call.return_data[0]
}

function emitTransfer(address arg1, address arg2, uint256 arg3) payable {
    if msg.sender == address(multiAssetAddress):
        emit Transfer(arg3, arg1, arg2);
        if not uint8(stor22.field_160):
            if feeAddress != 0:
                if arg2 != feeAddress:
                    require arg1 == feeAddress
}

function immortality() payable {
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 0x6f776e6572000000000000000000000000000000000000000000000000000000, msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    uint8(stor3.field_160) = 1
    return 1
}

function init(address arg1, bytes32 arg2) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if address(multiAssetAddress):
        return 0
    call arg1.isCreated(bytes32 rg1) with:
         gas gas_remaining - 25050 wei
        args arg2
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    uint256(stor1) = arg1 or Mask(96, 160, uint256(stor1))
    symbol = arg2
    return 1
}

function calculateFeeDynamic(uint256 arg1, uint256 arg2) payable {
    if arg1 * feePercent / 10000 < absMinFee:
        if arg2 > 7500:
            return ((2 * absMinFee) + (arg2 / 100000 * absMinFee))
        return absMinFee
    if arg1 * feePercent / 10000 <= absMaxFee:
        if arg2 > 7500:
            return ((arg1 * feePercent / 10000) + absMinFee + (arg2 / 100000 * absMinFee))
        return (arg1 * feePercent / 10000)
    if arg2 > 7500:
        return (absMaxFee + absMinFee + (arg2 / 100000 * absMinFee))
    return absMaxFee
}

function setAmbiAddress(address arg1, bytes32 arg2) payable {
    if ambiCAddress != 0:
        return 0
    call arg1.getNodeAddress(bytes32 rg1) with:
         gas gas_remaining - 25050 wei
        args arg2
    require ext_call.success
    if ext_call.return_data[12 len 20] != this.address:
        call arg1.addNode(bytes32 rg1, address rg2) with:
             gas gas_remaining - 25050 wei
            args arg2, this.address
        require ext_call.success
        if not ext_call.return_data[0]:
            return 0
    name = arg2
    uint256(stor3.field_0) = arg1 or Mask(96, 160, uint256(stor3.field_0))
    return 1
}

function setupFee(address arg1) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 0x61646d696e000000000000000000000000000000000000000000000000000000, msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    uint256(stor22.field_0) = arg1 or Mask(96, 160, uint256(stor22.field_0))
    return 1
}

function setForward(bytes4 arg1, address arg2) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 0x61646d696e000000000000000000000000000000000000000000000000000000, msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    uint256(allowedForwards[arg1]) = arg2 or Mask(96, 160, uint256(allowedForwards[arg1]))
    return 1
}

function setFeeStructure(uint256 arg1, uint256 arg2, uint256 arg3) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 'cron', msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    if arg2 > 10000:
        return 0
    if arg3 < arg1:
        return 0
    absMinFee = arg1
    feePercent = arg2
    absMaxFee = arg3
    return 1
}

function takeFee(address arg1, uint256 arg2, string arg3) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 'fee', msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    if 0 == feeAddress:
        return 1
    if feeAddress == arg1:
        return 1
    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
         gas gas_remaining - 25050 wei
        args address(arg1), feeAddress, arg2, symbol, Array(len=arg3.length, data=arg3[all])
    require ext_call.success
    return bool(ext_call.return_data[0])
}

function setupTreasury(address arg1, uint256 arg2) payable {
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 0x61646d696e000000000000000000000000000000000000000000000000000000, msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    if 0 == arg2:
        if msg.value <= 0:
            return 0
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        if ext_call.success:
            return 0
    else:
        uint256(stor21) = arg1 or Mask(96, 160, uint256(stor21))
        txGasPriceLimit = arg2
        if msg.value <= 0:
            return 1
        call arg1 with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        if ext_call.success:
            return 1
    ('iszero', 'ext_call.success')
    revert 
}

function updateRefundGas() payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if ambiCAddress != 0:
        call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
             gas gas_remaining - 25050 wei
            args name, 0x7365747570000000000000000000000000000000000000000000000000000000, msg.sender
        require ext_call.success
        if ext_call.return_data[0]:
            if block.gasprice <= txGasPriceLimit:
                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                     gas gas_remaining - 25050 wei
                    args tx.origin, 5 * 10^15
                require ext_call.success
                if ext_call.return_data[0]:
                    refundGas = 0
                    return 0
                else:
                    return 0
            else:
                return 0
        else:
            return 0
    else:
        return 0
}

function setOperationsCallGas(uint256 arg1, uint256 arg2, uint256 arg3, uint256 arg4, uint256 arg5, uint256 arg6, uint256 arg7, uint256 arg8, uint256 arg9, uint256 arg10, uint256 arg11) payable {
    if msg.value > 0:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
    if 0 == ambiCAddress:
        return 0
    call ambiCAddress.hasRelation(bytes32 rg1, bytes32 rg2, address rg3) with:
         gas gas_remaining - 25050 wei
        args name, 0x7365747570000000000000000000000000000000000000000000000000000000, msg.sender
    require ext_call.success
    if not ext_call.return_data[0]:
        return 0
    transferCallGas = arg1
    transferFromCallGas = arg2
    transferToICAPCallGas = arg3
    transferFromToICAPCallGas = arg4
    transferWithReferenceCallGas = arg5
    transferFromWithReferenceCallGas = arg6
    transferToICAPWithReferenceCallGas = arg7
    transferFromToICAPWithReferenceCallGas = arg8
    approveCallGas = arg9
    forwardCallGas = arg10
    setCosignerCallGas = arg11
    return 1
}

function sendToOwner() payable {
    if msg.value <= 0:
        call address(multiAssetAddress).owner(bytes32 rg1) with:
             gas gas_remaining - 25050 wei
            args symbol
        require ext_call.success
    else:
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        require ext_call.success
        call address(multiAssetAddress).owner(bytes32 rg1) with:
             gas gas_remaining - 25050 wei
            args symbol
    if eth.balance(this.address) <= 0:
        call address(multiAssetAddress).balanceOf(address rg1, bytes32 rg2) with:
             gas gas_remaining - 25050 wei
            args address(ext_call.return_data[0]), symbol
        require ext_call.success
        call address(multiAssetAddress).transfer(address rg1, uint256 rg2, bytes32 rg3) with:
             gas gas_remaining - 25050 wei
            args address(ext_call.return_data[0]), ext_call.return_data[0], symbol
        if not ext_call.return_data[0]:
            return bool(ext_call.return_data[0])
        return 1
    call ext_call.return_data[12 len 20] with:
       value eth.balance(this.address) wei
         gas gas_remaining - 34050 wei
    call address(multiAssetAddress).balanceOf(address rg1, bytes32 rg2) with:
         gas gas_remaining - 25050 wei
        args address(ext_call.return_data[0]), symbol
    require ext_call.success
    call address(multiAssetAddress).transfer(address rg1, uint256 rg2, bytes32 rg3) with:
         gas gas_remaining - 25050 wei
        args address(ext_call.return_data[0]), ext_call.return_data[0], symbol
    if not ext_call.return_data[0]:
        return bool(ext_call.return_data[0])
    return bool(ext_call.success)
}

function setCosignerAddress(address arg1) payable {
    if 0 < absMinFee:
        if 0 == feeAddress:
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    if 0 == feeAddress:
                        return 0
                    if feeAddress == msg.sender:
                        return 0
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0
                else:
                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), symbol
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == msg.sender:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if 0 <= absMaxFee:
            if 0 == feeAddress:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, 0, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), symbol
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), symbol
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function checkSetCosignerAddress(address arg1) payable {
    if 0 < absMinFee:
        if 0 == feeAddress:
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    if 0 == feeAddress:
                        return 0, 1
                    if feeAddress == msg.sender:
                        return 0, 1
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0, 1
                else:
                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), symbol
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == msg.sender:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if 0 <= absMaxFee:
            if 0 == feeAddress:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, 0, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), symbol
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), symbol
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), symbol
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, 'Cosigner fee', mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), symbol
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxySetCosignerAddress(address rg1, bytes32 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), symbol
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (setCosignerCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function approve(address arg1, uint256 arg2) payable {
    if arg1 == this.address:
        if msg.value > 0:
            call msg.sender with:
               value msg.value wei
                 gas gas_remaining - 34050 wei
            require ext_call.success
        if tx.origin != msg.sender:
            return 0
        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
             gas gas_remaining - 25050 wei
            args address(arg1), arg2, symbol
        require ext_call.success
        return bool(ext_call.return_data[0])
    if 0 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0
                    if feeAddress == msg.sender:
                        return 0
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0
                else:
                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, symbol
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[377 len 11]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if 0 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[377 len 11]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, 0, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[377 len 11]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function transferFromToICAP(address arg1, bytes32 arg2, uint256 arg3) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0
                    if feeAddress == arg1:
                        return 0
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0
                else:
                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, arg3, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == arg1:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, 0, feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, arg3 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function transferFrom(address arg1, address arg2, uint256 arg3) payable {
    uint8(stor22.field_160) = 1
    if arg3 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0
                    if feeAddress == arg1:
                        return 0
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0
                else:
                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == arg1:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, 0, feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, arg3 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function checkApprove(address arg1, uint256 arg2) payable {
    if arg1 == this.address:
        if msg.value > 0:
            call msg.sender with:
               value msg.value wei
                 gas gas_remaining - 34050 wei
            require ext_call.success
        if tx.origin != msg.sender:
            return 0
        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
             gas gas_remaining - 25050 wei
            args address(arg1), arg2, symbol
        require ext_call.success
        return bool(ext_call.return_data[0]), 0
    if 0 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0, 1
                    if feeAddress == msg.sender:
                        return 0, 1
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0, 1
                else:
                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, symbol
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[377 len 11]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if 0 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[377 len 11]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, 0, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[377 len 11]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 11, 'Approve fee', mem[367 len 21]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyApprove(address rg1, uint256 rg2, bytes32 rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (approveCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function checkTransferFromToICAP(address arg1, bytes32 arg2, uint256 arg3) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0, 1
                    if feeAddress == arg1:
                        return 0, 1
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0, 1
                else:
                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, arg3, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == arg1:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, 0, feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, arg3 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function checkTransferFrom(address arg1, address arg2, uint256 arg3) payable {
    uint8(stor22.field_160) = 1
    if arg3 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if tx.origin != msg.sender:
                    uint8(stor22.field_160) = 0
                    if 0 == feeAddress:
                        return 0, 1
                    if feeAddress == arg1:
                        return 0, 1
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                    if ext_call.success:
                        if ext_call.return_data[0]:
                            return 0, 1
                else:
                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == arg1:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, 0, feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMinFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, arg3 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), arg3 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, 0, feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), address(arg1), absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function transferToICAP(bytes32 arg1, uint256 arg2) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if msg.sender == tx.origin:
                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                         gas gas_remaining - 25050 wei
                        args arg1, arg2, 96, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                else:
                    call address(multiAssetAddress).0xa48a663c with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, arg1, arg2, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, arg2 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, 96, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, 96, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function transfer(address arg1, uint256 arg2) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if msg.sender == tx.origin:
                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, symbol, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                else:
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, arg2 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function checkTransferToICAP(bytes32 arg1, uint256 arg2) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if msg.sender == tx.origin:
                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                         gas gas_remaining - 25050 wei
                        args arg1, arg2, 96, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call address(multiAssetAddress).0xa48a663c with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, arg1, arg2, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, arg2 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, 96, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 0, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, 96, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, 96, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, 96, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, 96, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 0, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function checkTransfer(address arg1, uint256 arg2) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 0 == feeAddress:
            uint8(stor22.field_160) = 1
            if msg.value <= 0:
                if msg.sender == tx.origin:
                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), arg2, symbol, 128, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
            else:
                call msg.sender with:
                   value msg.value wei
                     gas gas_remaining - 34050 wei
                if ext_call.success:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
        else:
            if feeAddress == msg.sender:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                mem[356] = mem[376 len 12]
                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                     gas gas_remaining - 25050 wei
                    args 0, uint32(msg.sender), feeAddress, absMinFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                if ext_call.success:
                    if not ext_call.return_data[0]:
                        return 0
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMinFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, arg2 * feePercent / 10000, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, arg2 * feePercent / 10000, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, 128, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, 160, 0
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, 128, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, 160, 0
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[356] = mem[376 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args 0, uint32(msg.sender), feeAddress, absMaxFee, symbol, 160, 12, Mask(96, 0, 'Transfer fee'), mem[368 len 20]
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, 128, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, 160, 0
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, 128, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 0, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, 160, 0
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferCallGas * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args 0, uint32(stor22.field_0), msg.sender, absMaxFee, symbol, 160, 10, 0, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function _fallback() payable {
    if 0 == address(allowedForwards[uint32(call.func_hash)]):
        if msg.value <= 0:
            return 0
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        if ext_call.success:
            return 0
    else:
        if 0 < absMinFee:
            if 50 * calldata.size > 7500:
                if 0 == feeAddress:
                    mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                    if not calldata.size % 32:
                        call address(allowedForwards[uint32(call.func_hash)]) with:
                           funct call.data[0 len 4]
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args call.data[4 len calldata.size - 4]
                    else:
                        mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                        call address(allowedForwards[uint32(call.func_hash)]) with:
                           funct call.data[0 len 4]
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                    if ext_call.success:
                        if block.gasprice <= txGasPriceLimit:
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                        return 1
                    if 0 == feeAddress:
                        if msg.value <= 0:
                            return 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            return 0
                    else:
                        if feeAddress == msg.sender:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        mem[ceil32(calldata.size) + 196] = msg.sender
                        mem[ceil32(calldata.size) + 228] = feeAddress
                        mem[ceil32(calldata.size) + 260] = (2 * absMinFee) + (50 * calldata.size / 100000 * absMinFee)
                        mem[ceil32(calldata.size) + 292] = symbol
                        mem[ceil32(calldata.size) + 324] = 160
                        mem[ceil32(calldata.size) + 356] = 11
                        mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, (2 * absMinFee) + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(calldata.size) + 388])
                        mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (2 * absMinFee) + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
            else:
                if 0 == feeAddress:
                    mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                    if not calldata.size % 32:
                        call address(allowedForwards[uint32(call.func_hash)]) with:
                           funct call.data[0 len 4]
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args call.data[4 len calldata.size - 4]
                    else:
                        mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                        call address(allowedForwards[uint32(call.func_hash)]) with:
                           funct call.data[0 len 4]
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                    if ext_call.success:
                        if block.gasprice <= txGasPriceLimit:
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                        return 1
                    if 0 == feeAddress:
                        if msg.value <= 0:
                            return 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            return 0
                    else:
                        if feeAddress == msg.sender:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        mem[ceil32(calldata.size) + 196] = msg.sender
                        mem[ceil32(calldata.size) + 228] = feeAddress
                        mem[ceil32(calldata.size) + 260] = absMinFee
                        mem[ceil32(calldata.size) + 292] = symbol
                        mem[ceil32(calldata.size) + 324] = 160
                        mem[ceil32(calldata.size) + 356] = 11
                        mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMinFee, symbol, Array(len=11, data=mem[ceil32(calldata.size) + 388])
                        mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
        else:
            if 0 <= absMaxFee:
                if 50 * calldata.size > 7500:
                    if 0 == feeAddress:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(calldata.size) + 196] = msg.sender
                            mem[ceil32(calldata.size) + 228] = feeAddress
                            mem[ceil32(calldata.size) + 260] = absMinFee + (50 * calldata.size / 100000 * absMinFee)
                            mem[ceil32(calldata.size) + 292] = symbol
                            mem[ceil32(calldata.size) + 324] = 160
                            mem[ceil32(calldata.size) + 356] = 11
                            mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(calldata.size) + 388])
                            mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                                if not calldata.size % 32:
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4]
                                else:
                                    mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                                if ext_call.success:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
                else:
                    if 0 == feeAddress:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(calldata.size) + 196] = msg.sender
                            mem[ceil32(calldata.size) + 228] = feeAddress
                            mem[ceil32(calldata.size) + 260] = 0
                            mem[ceil32(calldata.size) + 292] = symbol
                            mem[ceil32(calldata.size) + 324] = 160
                            mem[ceil32(calldata.size) + 356] = 11
                            mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, 0, symbol, 160, 11, mem[ceil32(calldata.size) + 388]
                            mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                                if not calldata.size % 32:
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4]
                                else:
                                    mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                                if ext_call.success:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
            else:
                if 50 * calldata.size > 7500:
                    if 0 == feeAddress:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(calldata.size) + 196] = msg.sender
                            mem[ceil32(calldata.size) + 228] = feeAddress
                            mem[ceil32(calldata.size) + 260] = absMaxFee + absMinFee + (50 * calldata.size / 100000 * absMinFee)
                            mem[ceil32(calldata.size) + 292] = symbol
                            mem[ceil32(calldata.size) + 324] = 160
                            mem[ceil32(calldata.size) + 356] = 11
                            mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMaxFee + absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(calldata.size) + 388])
                            mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                                if not calldata.size % 32:
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4]
                                else:
                                    mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                                if ext_call.success:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * calldata.size / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
                else:
                    if 0 == feeAddress:
                        mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                        if not calldata.size % 32:
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4]
                        else:
                            mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                            call address(allowedForwards[uint32(call.func_hash)]) with:
                               funct call.data[0 len 4]
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                        if ext_call.success:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                            if not calldata.size % 32:
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4]
                            else:
                                mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                call address(allowedForwards[uint32(call.func_hash)]) with:
                                   funct call.data[0 len 4]
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                            if ext_call.success:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(calldata.size) + 196] = msg.sender
                            mem[ceil32(calldata.size) + 228] = feeAddress
                            mem[ceil32(calldata.size) + 260] = absMaxFee
                            mem[ceil32(calldata.size) + 292] = symbol
                            mem[ceil32(calldata.size) + 324] = 160
                            mem[ceil32(calldata.size) + 356] = 11
                            mem[ceil32(calldata.size) + 388] = mem[ceil32(calldata.size) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMaxFee, symbol, Array(len=11, data=mem[ceil32(calldata.size) + 388])
                            mem[ceil32(calldata.size) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(calldata.size) + 192 len calldata.size] = call.data[0 len calldata.size]
                                if not calldata.size % 32:
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4]
                                else:
                                    mem[floor32(calldata.size) + ceil32(calldata.size) + 192] = mem[floor32(calldata.size) + ceil32(calldata.size) + -(calldata.size % 32) + 224 len calldata.size % 32]
                                    call address(allowedForwards[uint32(call.func_hash)]) with:
                                       funct call.data[0 len 4]
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args call.data[4 len calldata.size - 4], mem[ceil32(calldata.size) + calldata.size + 192 len -(calldata.size % 32) + 32]
                                if ext_call.success:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * calldata.size * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
    revert 
}

function checkForward(bytes arg1) payable {
    mem[128 len arg1.length] = arg1[all]
    require 0 < arg1.length
    require 1 < arg1.length
    _5 = mem[129]
    require 2 < arg1.length
    _7 = mem[130]
    require 3 < arg1.length
    _10 = mem[131]
    mem[ceil32(arg1.length) + 128] = Mask(8, 248, mem[128])
    if 0 == address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]):
        if msg.value <= 0:
            return 0
        call msg.sender with:
           value msg.value wei
             gas gas_remaining - 34050 wei
        if ext_call.success:
            return 0
    else:
        if 0 < absMinFee:
            if 50 * arg1.length > 7500:
                if 0 == feeAddress:
                    mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                    if not arg1.length % 32:
                        call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args arg1[all]
                    else:
                        mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                        call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                    if ext_call.success:
                        if block.gasprice > txGasPriceLimit:
                            return 1, 0
                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                             gas gas_remaining - 25050 wei
                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                        require ext_call.success
                        return 1, bool(ext_call.return_data[0])
                    if 0 == feeAddress:
                        if msg.value <= 0:
                            return 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            return 0
                    else:
                        if feeAddress == msg.sender:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        mem[ceil32(arg1.length) + 196] = msg.sender
                        mem[ceil32(arg1.length) + 228] = feeAddress
                        mem[ceil32(arg1.length) + 260] = (2 * absMinFee) + (50 * arg1.length / 100000 * absMinFee)
                        mem[ceil32(arg1.length) + 292] = symbol
                        mem[ceil32(arg1.length) + 324] = 160
                        mem[ceil32(arg1.length) + 356] = 11
                        mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, (2 * absMinFee) + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(arg1.length) + 388])
                        mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (2 * absMinFee) + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
            else:
                if 0 == feeAddress:
                    mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                    if not arg1.length % 32:
                        call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args arg1[all]
                    else:
                        mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                        call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                            args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                    if ext_call.success:
                        if block.gasprice > txGasPriceLimit:
                            return 1, 0
                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                             gas gas_remaining - 25050 wei
                            args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                        require ext_call.success
                        return 1, bool(ext_call.return_data[0])
                    if 0 == feeAddress:
                        if msg.value <= 0:
                            return 0
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            return 0
                    else:
                        if feeAddress == msg.sender:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        mem[ceil32(arg1.length) + 196] = msg.sender
                        mem[ceil32(arg1.length) + 228] = feeAddress
                        mem[ceil32(arg1.length) + 260] = absMinFee
                        mem[ceil32(arg1.length) + 292] = symbol
                        mem[ceil32(arg1.length) + 324] = 160
                        mem[ceil32(arg1.length) + 356] = 11
                        mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMinFee, symbol, Array(len=11, data=mem[ceil32(arg1.length) + 388])
                        mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
        else:
            if 0 <= absMaxFee:
                if 50 * arg1.length > 7500:
                    if 0 == feeAddress:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(arg1.length) + 196] = msg.sender
                            mem[ceil32(arg1.length) + 228] = feeAddress
                            mem[ceil32(arg1.length) + 260] = absMinFee + (50 * arg1.length / 100000 * absMinFee)
                            mem[ceil32(arg1.length) + 292] = symbol
                            mem[ceil32(arg1.length) + 324] = 160
                            mem[ceil32(arg1.length) + 356] = 11
                            mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(arg1.length) + 388])
                            mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                                if not arg1.length % 32:
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args arg1[all]
                                else:
                                    mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                                if ext_call.success:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
                else:
                    if 0 == feeAddress:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(arg1.length) + 196] = msg.sender
                            mem[ceil32(arg1.length) + 228] = feeAddress
                            mem[ceil32(arg1.length) + 260] = 0
                            mem[ceil32(arg1.length) + 292] = symbol
                            mem[ceil32(arg1.length) + 324] = 160
                            mem[ceil32(arg1.length) + 356] = 11
                            mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, 0, symbol, 160, 11, mem[ceil32(arg1.length) + 388]
                            mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                                if not arg1.length % 32:
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args arg1[all]
                                else:
                                    mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                                if ext_call.success:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, 0, symbol, 160, 10, 'Fee return'
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
            else:
                if 50 * arg1.length > 7500:
                    if 0 == feeAddress:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(arg1.length) + 196] = msg.sender
                            mem[ceil32(arg1.length) + 228] = feeAddress
                            mem[ceil32(arg1.length) + 260] = absMaxFee + absMinFee + (50 * arg1.length / 100000 * absMinFee)
                            mem[ceil32(arg1.length) + 292] = symbol
                            mem[ceil32(arg1.length) + 324] = 160
                            mem[ceil32(arg1.length) + 356] = 11
                            mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMaxFee + absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=11, data=mem[ceil32(arg1.length) + 388])
                            mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                                if not arg1.length % 32:
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args arg1[all]
                                else:
                                    mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                                if ext_call.success:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee + absMinFee + (50 * arg1.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
                else:
                    if 0 == feeAddress:
                        mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                        if not arg1.length % 32:
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args arg1[all]
                        else:
                            mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                            call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                                args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                        if ext_call.success:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            if msg.value <= 0:
                                return 0
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                return 0
                        else:
                            if feeAddress == msg.sender:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                    else:
                        if feeAddress == msg.sender:
                            mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                            if not arg1.length % 32:
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args arg1[all]
                            else:
                                mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                    args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                            if ext_call.success:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                if msg.value <= 0:
                                    return 0
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    return 0
                            else:
                                if feeAddress == msg.sender:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            if msg.value <= 0:
                                                return 0
                                            call msg.sender with:
                                               value msg.value wei
                                                 gas gas_remaining - 34050 wei
                                            if ext_call.success:
                                                return 0
                        else:
                            mem[ceil32(arg1.length) + 196] = msg.sender
                            mem[ceil32(arg1.length) + 228] = feeAddress
                            mem[ceil32(arg1.length) + 260] = absMaxFee
                            mem[ceil32(arg1.length) + 292] = symbol
                            mem[ceil32(arg1.length) + 324] = 160
                            mem[ceil32(arg1.length) + 356] = 11
                            mem[ceil32(arg1.length) + 388] = mem[ceil32(arg1.length) + 409 len 11]
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, feeAddress, absMaxFee, symbol, Array(len=11, data=mem[ceil32(arg1.length) + 388])
                            mem[ceil32(arg1.length) + 192] = ext_call.return_data[0]
                            if ext_call.success:
                                if not ext_call.return_data[0]:
                                    return 0
                                mem[ceil32(arg1.length) + 192 len arg1.length] = arg1[all]
                                if not arg1.length % 32:
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]) with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args arg1[all]
                                else:
                                    mem[floor32(arg1.length) + ceil32(arg1.length) + 192] = mem[floor32(arg1.length) + ceil32(arg1.length) + -(arg1.length % 32) + 224 len arg1.length % 32]
                                    call address(allowedForwards[mem[ceil32(arg1.length) + 128 len 1]][Mask(8, 248, _5) >> 248][Mask(8, 248, _7) >> 248][Mask(8, 248, _10) >> 248]).mem[ceil32(arg1.length) + 192 len 4] with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                        args mem[ceil32(arg1.length) + 196 len floor32(arg1.length) + 28]
                                if ext_call.success:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (forwardCallGas * block.gasprice) + (50 * arg1.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    if msg.value <= 0:
                                        return 0
                                    call msg.sender with:
                                       value msg.value wei
                                         gas gas_remaining - 34050 wei
                                    if ext_call.success:
                                        return 0
                                else:
                                    if feeAddress == msg.sender:
                                        if msg.value <= 0:
                                            return 0
                                        call msg.sender with:
                                           value msg.value wei
                                             gas gas_remaining - 34050 wei
                                        if ext_call.success:
                                            return 0
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                if msg.value <= 0:
                                                    return 0
                                                call msg.sender with:
                                                   value msg.value wei
                                                     gas gas_remaining - 34050 wei
                                                if ext_call.success:
                                                    return 0
    revert 
}

function checkTransferToICAPWithReference(bytes32 arg1, uint256 arg2, string arg3) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 75 * arg3.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                             gas gas_remaining - 25050 wei
                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).0xa48a663c with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                             gas gas_remaining - 25050 wei
                                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).0xa48a663c with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, arg2 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                             gas gas_remaining - 25050 wei
                                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).0xa48a663c with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                             gas gas_remaining - 25050 wei
                                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).0xa48a663c with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                 gas gas_remaining - 25050 wei
                                args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).0xa48a663c with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                     gas gas_remaining - 25050 wei
                                    args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).0xa48a663c with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                         gas gas_remaining - 25050 wei
                                        args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).0xa48a663c with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferToICAPWithReference(bytes32 rg1, uint256 rg2, string rg3) with:
                                             gas gas_remaining - 25050 wei
                                            args arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).0xa48a663c with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, arg1, arg2, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferToICAPWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function transferWithReference(address arg1, uint256 arg2, string arg3) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 75 * arg3.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice <= txGasPriceLimit:
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                            return 1
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == msg.sender:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, arg2 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == msg.sender:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == msg.sender:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == msg.sender:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == msg.sender:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    revert 
}

function checkTransferWithReference(address arg1, uint256 arg2, string arg3) payable {
    if arg2 * feePercent / 10000 < absMinFee:
        if 75 * arg3.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (2 * absMinFee) + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if msg.sender == tx.origin:
                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    else:
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                    if ext_call.success:
                        uint8(stor22.field_160) = 0
                        if ext_call.return_data[0]:
                            if block.gasprice > txGasPriceLimit:
                                return 1, 0
                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                 gas gas_remaining - 25050 wei
                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                            require ext_call.success
                            return 1, bool(ext_call.return_data[0])
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == msg.sender:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
            else:
                if feeAddress == msg.sender:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args msg.sender, feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
    else:
        if arg2 * feePercent / 10000 <= absMaxFee:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, (arg2 * feePercent / 10000) + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, arg2 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, arg2 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 75 * arg3.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee + absMinFee + (75 * arg3.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if msg.sender == tx.origin:
                            call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        else:
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == msg.sender:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                else:
                    if feeAddress == msg.sender:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if msg.sender == tx.origin:
                                call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            else:
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == msg.sender:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                    else:
                        mem[ceil32(arg3.length) + 388] = mem[ceil32(arg3.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args msg.sender, feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg3.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if msg.sender == tx.origin:
                                    call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                else:
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == msg.sender:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if msg.sender == tx.origin:
                                        call address(multiAssetAddress).proxyTransferWithReference(address rg1, uint256 rg2, bytes32 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    else:
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args msg.sender, address(arg1), arg2, symbol, Array(len=arg3.length, data=arg3[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferWithReferenceCallGas * block.gasprice) + (75 * arg3.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == msg.sender:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, msg.sender, absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    revert 
}

function transferFromToICAPWithReference(address arg1, bytes32 arg2, uint256 arg3, string arg4) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 75 * arg4.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, arg3 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
        else:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
    revert 
}

function transferFromWithReference(address arg1, address arg2, uint256 arg3, string arg4) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 75 * arg4.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0
                        if feeAddress == arg1:
                            return 0
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice <= txGasPriceLimit:
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                return 1
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, arg3 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
        else:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0
                            if feeAddress == arg1:
                                return 0
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice <= txGasPriceLimit:
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                    return 1
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0
                                if feeAddress == arg1:
                                    return 0
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice <= txGasPriceLimit:
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                        return 1
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0
                                    if feeAddress == arg1:
                                        return 0
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice <= txGasPriceLimit:
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                            return 1
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0
                                        if feeAddress == arg1:
                                            return 0
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice <= txGasPriceLimit:
                                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                         gas gas_remaining - 25050 wei
                                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                    require ext_call.success
                                                return 1
                                            if 0 == feeAddress:
                                                return 0
                                            if feeAddress == arg1:
                                                return 0
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0
    revert 
}

function checkTransferFromToICAPWithReference(address arg1, bytes32 arg2, uint256 arg3, string arg4) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 75 * arg4.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, arg3 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
        else:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromToICAPWithReference(address rg1, bytes32 rg2, uint256 rg3, string rg4) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), arg2, arg3, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromToICAPWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
    revert 
}

function checkTransferFromWithReference(address arg1, address arg2, uint256 arg3, string arg4) payable {
    if arg3 * feePercent / 10000 < absMinFee:
        if 75 * arg4.length > 7500:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (2 * absMinFee) + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
        else:
            if 0 == feeAddress:
                uint8(stor22.field_160) = 1
                if msg.value <= 0:
                    if tx.origin != msg.sender:
                        uint8(stor22.field_160) = 0
                        if 0 == feeAddress:
                            return 0, 1
                        if feeAddress == arg1:
                            return 0, 1
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                        if ext_call.success:
                            if ext_call.return_data[0]:
                                return 0, 1
                    else:
                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                        if ext_call.success:
                            uint8(stor22.field_160) = 0
                            if ext_call.return_data[0]:
                                if block.gasprice > txGasPriceLimit:
                                    return 1, 0
                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                     gas gas_remaining - 25050 wei
                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                require ext_call.success
                                return 1, bool(ext_call.return_data[0])
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                else:
                    call msg.sender with:
                       value msg.value wei
                         gas gas_remaining - 34050 wei
                    if ext_call.success:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
            else:
                if feeAddress == arg1:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                         gas gas_remaining - 25050 wei
                        args address(arg1), feeAddress, absMinFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                    if ext_call.success:
                        if not ext_call.return_data[0]:
                            return 0
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMinFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
    else:
        if arg3 * feePercent / 10000 <= absMaxFee:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), (arg3 * feePercent / 10000) + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, arg3 * feePercent / 10000, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), arg3 * feePercent / 10000, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
        else:
            if 75 * arg4.length > 7500:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee + absMinFee + (75 * arg4.length / 100000 * absMinFee), symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
            else:
                if 0 == feeAddress:
                    uint8(stor22.field_160) = 1
                    if msg.value <= 0:
                        if tx.origin != msg.sender:
                            uint8(stor22.field_160) = 0
                            if 0 == feeAddress:
                                return 0, 1
                            if feeAddress == arg1:
                                return 0, 1
                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                            if ext_call.success:
                                if ext_call.return_data[0]:
                                    return 0, 1
                        else:
                            call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                 gas gas_remaining - 25050 wei
                                args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                            if ext_call.success:
                                uint8(stor22.field_160) = 0
                                if ext_call.return_data[0]:
                                    if block.gasprice > txGasPriceLimit:
                                        return 1, 0
                                    call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                         gas gas_remaining - 25050 wei
                                        args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                    require ext_call.success
                                    return 1, bool(ext_call.return_data[0])
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                    else:
                        call msg.sender with:
                           value msg.value wei
                             gas gas_remaining - 34050 wei
                        if ext_call.success:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                else:
                    if feeAddress == arg1:
                        uint8(stor22.field_160) = 1
                        if msg.value <= 0:
                            if tx.origin != msg.sender:
                                uint8(stor22.field_160) = 0
                                if 0 == feeAddress:
                                    return 0, 1
                                if feeAddress == arg1:
                                    return 0, 1
                                call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                if ext_call.success:
                                    if ext_call.return_data[0]:
                                        return 0, 1
                            else:
                                call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                     gas gas_remaining - 25050 wei
                                    args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                if ext_call.success:
                                    uint8(stor22.field_160) = 0
                                    if ext_call.return_data[0]:
                                        if block.gasprice > txGasPriceLimit:
                                            return 1, 0
                                        call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                             gas gas_remaining - 25050 wei
                                            args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                        require ext_call.success
                                        return 1, bool(ext_call.return_data[0])
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                        else:
                            call msg.sender with:
                               value msg.value wei
                                 gas gas_remaining - 34050 wei
                            if ext_call.success:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                    else:
                        mem[ceil32(arg4.length) + 388] = mem[ceil32(arg4.length) + 408 len 12]
                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                             gas gas_remaining - 25050 wei
                            args address(arg1), feeAddress, absMaxFee, symbol, Array(len=12, data=mem[ceil32(arg4.length) + 388])
                        if ext_call.success:
                            if not ext_call.return_data[0]:
                                return 0
                            uint8(stor22.field_160) = 1
                            if msg.value <= 0:
                                if tx.origin != msg.sender:
                                    uint8(stor22.field_160) = 0
                                    if 0 == feeAddress:
                                        return 0, 1
                                    if feeAddress == arg1:
                                        return 0, 1
                                    call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                    if ext_call.success:
                                        if ext_call.return_data[0]:
                                            return 0, 1
                                else:
                                    call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                         gas gas_remaining - 25050 wei
                                        args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                    if ext_call.success:
                                        uint8(stor22.field_160) = 0
                                        if ext_call.return_data[0]:
                                            if block.gasprice > txGasPriceLimit:
                                                return 1, 0
                                            call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                 gas gas_remaining - 25050 wei
                                                args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                            require ext_call.success
                                            return 1, bool(ext_call.return_data[0])
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                            else:
                                call msg.sender with:
                                   value msg.value wei
                                     gas gas_remaining - 34050 wei
                                if ext_call.success:
                                    if tx.origin != msg.sender:
                                        uint8(stor22.field_160) = 0
                                        if 0 == feeAddress:
                                            return 0, 1
                                        if feeAddress == arg1:
                                            return 0, 1
                                        call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                        if ext_call.success:
                                            if ext_call.return_data[0]:
                                                return 0, 1
                                    else:
                                        call address(multiAssetAddress).proxyTransferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                             gas gas_remaining - 25050 wei
                                            args address(arg1), address(arg2), arg3, symbol, Array(len=arg4.length, data=arg4[all])
                                        if ext_call.success:
                                            uint8(stor22.field_160) = 0
                                            if ext_call.return_data[0]:
                                                if block.gasprice > txGasPriceLimit:
                                                    return 1, 0
                                                call address(treasuryAddress).withdraw(address rg1, uint256 rg2) with:
                                                     gas gas_remaining - 25050 wei
                                                    args tx.origin, (transferFromWithReferenceCallGas * block.gasprice) + (75 * arg4.length * block.gasprice) + (refundGas * block.gasprice)
                                                require ext_call.success
                                                return 1, bool(ext_call.return_data[0])
                                            if 0 == feeAddress:
                                                return 0, 1
                                            if feeAddress == arg1:
                                                return 0, 1
                                            call address(multiAssetAddress).transferFromWithReference(address rg1, address rg2, uint256 rg3, bytes32 rg4, string rg5) with:
                                                 gas gas_remaining - 25050 wei
                                                args feeAddress, address(arg1), absMaxFee, symbol, Array(len=10, data='Fee return')
                                            if ext_call.success:
                                                if ext_call.return_data[0]:
                                                    return 0, 1
    revert 
}



}

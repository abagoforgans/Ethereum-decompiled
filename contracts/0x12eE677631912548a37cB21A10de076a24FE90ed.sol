contract main {




// =====================  Runtime code  =====================


#
#  - transferFrom(address arg1, address arg2, uint256 arg3)
#  - transfer(address arg1, uint256 arg2)
#
address controllerAddress;
array of uint256 name;
uint8 decimals;
array of uint256 symbol;
array of uint256 version;
address parentTokenAddress;
uint256 parentSnapShotBlock;
uint256 creationBlock;
array of struct stor8;
mapping of uint256 allowance;
array of struct stor10;
uint8 transfersEnabled;
address tokenFactoryAddress; offset 8
mapping of uint8 stor12;
uint8 stor13;

function name() {
    return name[0 len name.length]
}

function creationBlock() {
    return creationBlock
}

function decimals() {
    return decimals
}

function version() {
    return version[0 len version.length]
}

function parentToken() {
    return parentTokenAddress
}

function symbol() {
    return symbol[0 len symbol.length]
}

function generateFinished() {
    return bool(stor13)
}

function transfersEnabled() {
    return bool(transfersEnabled)
}

function parentSnapShotBlock() {
    return parentSnapShotBlock
}

function blacklisted(address arg1) {
    return bool(stor12[arg1])
}

function allowance(address arg1, address arg2) {
    return allowance[address(arg1)][address(arg2)]
}

function tokenFactory() {
    return tokenFactoryAddress
}

function controller() {
    return controllerAddress
}

function destruct(address arg1) {
    require msg.sender == controllerAddress
    selfdestruct(arg1)
}

function finishGenerating() {
    require msg.sender == controllerAddress
    stor13 = 1
    return 1
}

function changeController(address arg1) {
    require msg.sender == controllerAddress
    controllerAddress = arg1
}

function enableTransfers(bool arg1) {
    require msg.sender == controllerAddress
    transfersEnabled = uint8(arg1)
}

function blacklistAccount(address arg1) {
    require msg.sender == controllerAddress
    stor12[address(arg1)] = 1
    return 1
}

function unBlacklistAccount(address arg1) {
    require msg.sender == controllerAddress
    stor12[address(arg1)] = 0
    return 1
}

function _fallback() payable {
    require controllerAddress
    require ext_code.size(controllerAddress) > 0
    require ext_code.size(controllerAddress)
    call controllerAddress.proxyPayment(address arg1) with:
       value msg.value wei
         gas gas_remaining wei
        args msg.sender
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    require return_data.size >= 32
    require ext_call.return_data[0]
}

function approve(address arg1, uint256 arg2) {
    require transfersEnabled
    if arg2:
        require not allowance[address(msg.sender)][address(arg1)]
    if controllerAddress:
        if ext_code.size(controllerAddress) > 0:
            require ext_code.size(controllerAddress)
            call controllerAddress.onApprove(address arg1, address arg2, uint256 arg3) with:
                 gas gas_remaining wei
                args msg.sender, address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    return 1
}

function claimTokens(address arg1) {
    require msg.sender == controllerAddress
    if not arg1:
        call controllerAddress with:
           value eth.balance(this.address) wei
             gas 2300 * is_zero(value) wei
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
    else:
        require ext_code.size(arg1)
        call arg1.0x70a08231 with:
             gas gas_remaining wei
            args this.address
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(arg1)
        call arg1.0xa9059cbb with:
             gas gas_remaining wei
            args controllerAddress, ext_call.return_data[0]
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        emit ClaimedTokens(ext_call.return_data[0], arg1, controllerAddress);
}

function approveAndCall(address arg1, uint256 arg2, bytes arg3) {
    require transfersEnabled
    if arg2:
        require not allowance[address(msg.sender)][address(arg1)]
    if controllerAddress:
        if ext_code.size(controllerAddress) > 0:
            require ext_code.size(controllerAddress)
            call controllerAddress.onApprove(address arg1, address arg2, uint256 arg3) with:
                 gas gas_remaining wei
                args msg.sender, address(arg1), arg2
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0]
    allowance[address(msg.sender)][address(arg1)] = arg2
    emit Approval(arg2, msg.sender, arg1);
    require ext_code.size(arg1)
    call arg1.receiveApproval(address arg1, uint256 arg2, address arg3, bytes arg4) with:
         gas gas_remaining wei
        args msg.sender, arg2, address(this.address), Array(len=arg3.length, data=arg3[all])
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
    return 1
}

function totalSupplyAt(uint256 arg1) {
    if not stor10.length:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if arg1 < parentSnapShotBlock:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args arg1
        else:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    require 0 < stor10.length
    if uint128(stor10.field_0) > arg1:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if arg1 < parentSnapShotBlock:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args arg1
        else:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    if not stor10.length:
        return 0
    require stor10.length - 1 < stor10.length
    if arg1 >= uint128(stor10[stor10.length].field_0):
        if stor10.length - 1 < stor10.length:
            return uint128(stor10[stor10.length].field_0)
    else:
        if 0 < stor10.length:
            if arg1 < uint128(stor10.field_0):
                return 0
            s = 0
            idx = 0
            while stor10.length - 1 > idx:
                require stor10.length + idx / 2 < stor10.length
                mem[0] = 10
                if uint128(stor10[0.5 / stor10.length + idx].field_0) > arg1:
                    s = stor10.length + idx / 2
                    idx = idx
                    continue 
                s = stor10.length + idx / 2
                idx = stor10.length + idx / 2
                continue 
            if idx < stor10.length:
                return uint128(stor10[idx].field_128)
    revert
}

function totalSupply() {
    if not stor10.length:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if block.number < parentSnapShotBlock:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args block.number
        else:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    require 0 < stor10.length
    if uint128(stor10.field_0) > block.number:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if block.number < parentSnapShotBlock:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args block.number
        else:
            call parentTokenAddress.0x981b24d0 with:
                 gas gas_remaining wei
                args parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    if not stor10.length:
        return 0
    require stor10.length - 1 < stor10.length
    if block.number >= uint128(stor10[stor10.length].field_0):
        if stor10.length - 1 < stor10.length:
            return uint128(stor10[stor10.length].field_0)
    else:
        if 0 < stor10.length:
            if block.number < uint128(stor10.field_0):
                return 0
            s = 0
            idx = 0
            while stor10.length - 1 > idx:
                require stor10.length + idx / 2 < stor10.length
                mem[0] = 10
                if uint128(stor10[0.5 / stor10.length + idx].field_0) > block.number:
                    s = stor10.length + idx / 2
                    idx = idx
                    continue 
                s = stor10.length + idx / 2
                idx = stor10.length + idx / 2
                continue 
            if idx < stor10.length:
                return uint128(stor10[idx].field_128)
    revert
}

function balanceOfAt(address arg1, uint256 arg2) {
    if not uint256(stor8[address(arg1)].field_0):
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if arg2 < parentSnapShotBlock:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), arg2
        else:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    require 0 < uint256(stor8[address(arg1)].field_0)
    if uint128(stor8[address(arg1)].field_0) > arg2:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if arg2 < parentSnapShotBlock:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), arg2
        else:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    if not uint256(stor8[address(arg1)].field_0):
        return 0
    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
    if arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
        if uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0):
            return uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
    else:
        if 0 < uint256(stor8[address(arg1)].field_0):
            if arg2 < uint128(stor8[address(arg1)].field_0):
                return 0
            s = 0
            idx = 0
            while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                mem[0] = sha3(address(arg1), 8)
                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > arg2:
                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                    idx = idx
                    continue 
                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                continue 
            if idx < uint256(stor8[address(arg1)].field_0):
                return uint128(stor8[address(arg1)][idx].field_128)
    revert
}

function balanceOf(address arg1) {
    if not uint256(stor8[address(arg1)].field_0):
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if block.number < parentSnapShotBlock:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), block.number
        else:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    require 0 < uint256(stor8[address(arg1)].field_0)
    if uint128(stor8[address(arg1)].field_0) > block.number:
        if not parentTokenAddress:
            return 0
        require ext_code.size(parentTokenAddress)
        if block.number < parentSnapShotBlock:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), block.number
        else:
            call parentTokenAddress.0x4ee2cd7e with:
                 gas gas_remaining wei
                args address(arg1), parentSnapShotBlock
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        return ext_call.return_data[0]
    if not uint256(stor8[address(arg1)].field_0):
        return 0
    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
    if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
        if uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0):
            return uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
    else:
        if 0 < uint256(stor8[address(arg1)].field_0):
            if block.number < uint128(stor8[address(arg1)].field_0):
                return 0
            s = 0
            idx = 0
            while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                mem[0] = sha3(address(arg1), 8)
                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                    idx = idx
                    continue 
                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                continue 
            if idx < uint256(stor8[address(arg1)].field_0):
                return uint128(stor8[address(arg1)][idx].field_128)
    revert
}

function createCloneToken(string arg1, uint8 arg2, string arg3, uint256 arg4, bool arg5) {
    mem[128 len arg1.length] = arg1[all]
    mem[ceil32(arg1.length) + 128] = arg3.length
    mem[ceil32(arg1.length) + 160 len arg3.length] = arg3[all]
    mem[ceil32(arg1.length) + ceil32(arg3.length) + 160] = 0x5b7b72c100000000000000000000000000000000000000000000000000000000
    mem[ceil32(arg1.length) + ceil32(arg3.length) + 388 len ceil32(arg1.length)] = arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]
    mem[arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + 388] = arg3.length
    mem[arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + 420 len ceil32(arg3.length)] = arg3[all], mem[ceil32(arg1.length) + arg3.length + 160 len ceil32(arg3.length) - arg3.length]
    if arg4:
        if not arg3.length % 32:
            require ext_code.size(tokenFactoryAddress)
            call tokenFactoryAddress.createCloneToken(address arg1, uint256 arg2, string arg3, uint8 arg4, string arg5, bool arg6) with:
                 gas gas_remaining wei
                args address(this.address), arg4, Array(len=arg1.length, data=Mask(8 * ceil32(arg1.length), -(8 * ceil32(arg1.length)) + 256, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]) << (8 * ceil32(arg1.length)) - 256, mem[(2 * ceil32(arg1.length)) + ceil32(arg3.length) + 388 len arg3.length + arg1.length + -ceil32(arg1.length) + 32]), arg2 << 248, arg1.length + 224, arg5
        else:
            mem[floor32(arg3.length) + arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + 420] = mem[floor32(arg3.length) + arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + -(arg3.length % 32) + 452 len arg3.length % 32]
            require ext_code.size(tokenFactoryAddress)
            call tokenFactoryAddress.createCloneToken(address arg1, uint256 arg2, string arg3, uint8 arg4, string arg5, bool arg6) with:
                 gas gas_remaining wei
                args address(this.address), arg4, Array(len=arg1.length, data=Mask(8 * ceil32(arg1.length), -(8 * ceil32(arg1.length)) + 256, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]) << (8 * ceil32(arg1.length)) - 256, mem[(2 * ceil32(arg1.length)) + ceil32(arg3.length) + 388 len floor32(arg3.length) + arg1.length + -ceil32(arg1.length) + 64]), arg2 << 248, arg1.length + 224, arg5
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        call address(ext_call.return_data[0]).0x3cebb823 with:
             gas gas_remaining wei
            args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit NewCloneToken(arg4, address(ext_call.return_data[0]));
    else:
        if not arg3.length % 32:
            require ext_code.size(tokenFactoryAddress)
            call tokenFactoryAddress.createCloneToken(address arg1, uint256 arg2, string arg3, uint8 arg4, string arg5, bool arg6) with:
                 gas gas_remaining wei
                args address(this.address), block.number, Array(len=arg1.length, data=Mask(8 * ceil32(arg1.length), -(8 * ceil32(arg1.length)) + 256, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]) << (8 * ceil32(arg1.length)) - 256, mem[(2 * ceil32(arg1.length)) + ceil32(arg3.length) + 388 len arg3.length + arg1.length + -ceil32(arg1.length) + 32]), arg2 << 248, arg1.length + 224, arg5
        else:
            mem[floor32(arg3.length) + arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + 420] = mem[floor32(arg3.length) + arg1.length + ceil32(arg1.length) + ceil32(arg3.length) + -(arg3.length % 32) + 452 len arg3.length % 32]
            require ext_code.size(tokenFactoryAddress)
            call tokenFactoryAddress.createCloneToken(address arg1, uint256 arg2, string arg3, uint8 arg4, string arg5, bool arg6) with:
                 gas gas_remaining wei
                args address(this.address), block.number, Array(len=arg1.length, data=Mask(8 * ceil32(arg1.length), -(8 * ceil32(arg1.length)) + 256, arg1[all], mem[arg1.length + 128 len ceil32(arg1.length) - arg1.length]) << (8 * ceil32(arg1.length)) - 256, mem[(2 * ceil32(arg1.length)) + ceil32(arg3.length) + 388 len floor32(arg3.length) + arg1.length + -ceil32(arg1.length) + 64]), arg2 << 248, arg1.length + 224, arg5
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        require return_data.size >= 32
        require ext_code.size(address(ext_call.return_data[0]))
        call address(ext_call.return_data[0]).0x3cebb823 with:
             gas gas_remaining wei
            args msg.sender
        if not ext_call.success:
            revert with ext_call.return_data[0 len return_data.size]
        emit NewCloneToken(block.number, address(ext_call.return_data[0]));
    return address(ext_call.return_data[0])
}

function destroyTokens(address arg1, uint256 arg2) {
    require msg.sender == controllerAddress
    if not stor10.length:
        if not parentTokenAddress:
            require 0 >= arg2
            if not uint256(stor8[address(arg1)].field_0):
                if not parentTokenAddress:
                    require 0 >= arg2
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                else:
                    require ext_code.size(parentTokenAddress)
                    if block.number < parentSnapShotBlock:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), block.number
                    else:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), parentSnapShotBlock
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] >= arg2
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
            else:
                require 0 < uint256(stor8[address(arg1)].field_0)
                if uint128(stor8[address(arg1)].field_0) > block.number:
                    if not parentTokenAddress:
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                else:
                    if not uint256(stor8[address(arg1)].field_0):
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if block.number < uint128(stor8[address(arg1)].field_0):
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                s = 0
                                idx = 0
                                while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                    require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                    mem[0] = sha3(address(arg1), 8)
                                    if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = idx
                                        continue 
                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    continue 
                                require idx < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > s:
                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
        else:
            require ext_code.size(parentTokenAddress)
            if block.number < parentSnapShotBlock:
                call parentTokenAddress.0x981b24d0 with:
                     gas gas_remaining wei
                    args block.number
            else:
                call parentTokenAddress.0x981b24d0 with:
                     gas gas_remaining wei
                    args parentSnapShotBlock
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] >= arg2
            if not uint256(stor8[address(arg1)].field_0):
                if not parentTokenAddress:
                    require 0 >= arg2
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                else:
                    require ext_code.size(parentTokenAddress)
                    if block.number < parentSnapShotBlock:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), block.number
                    else:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), parentSnapShotBlock
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] >= arg2
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
            else:
                require 0 < uint256(stor8[address(arg1)].field_0)
                if uint128(stor8[address(arg1)].field_0) > block.number:
                    if not parentTokenAddress:
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                else:
                    if not uint256(stor8[address(arg1)].field_0):
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if block.number < uint128(stor8[address(arg1)].field_0):
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                s = 0
                                idx = 0
                                while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                    require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                    mem[0] = sha3(address(arg1), 8)
                                    if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = idx
                                        continue 
                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    continue 
                                require idx < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > s:
                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
    else:
        require 0 < stor10.length
        if uint128(stor10.field_0) > block.number:
            if not parentTokenAddress:
                require 0 >= arg2
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
            else:
                require ext_code.size(parentTokenAddress)
                if block.number < parentSnapShotBlock:
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args block.number
                else:
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args parentSnapShotBlock
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] >= arg2
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
        else:
            if not stor10.length:
                require 0 >= arg2
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require 0 >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] >= arg2
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
            else:
                require stor10.length - 1 < stor10.length
                if block.number >= uint128(stor10[stor10.length].field_0):
                    require stor10.length - 1 < stor10.length
                    require uint128(stor10[stor10.length].field_0) >= arg2
                    if not uint256(stor8[address(arg1)].field_0):
                        if not parentTokenAddress:
                            require 0 >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] >= arg2
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                    else:
                        require 0 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)].field_0) > block.number:
                            if not parentTokenAddress:
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            if not uint256(stor8[address(arg1)].field_0):
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                else:
                                    require 0 < uint256(stor8[address(arg1)].field_0)
                                    if block.number < uint128(stor8[address(arg1)].field_0):
                                        require 0 >= arg2
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        s = 0
                                        idx = 0
                                        while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                            require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                            mem[0] = sha3(address(arg1), 8)
                                            if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                idx = idx
                                                continue 
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            continue 
                                        require idx < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) - arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    s = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > s:
                                                        uint128(stor8[address(arg1)][s].field_0) = 0
                                                        uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                else:
                    require 0 < stor10.length
                    if block.number < uint128(stor10.field_0):
                        require 0 >= arg2
                        if not uint256(stor8[address(arg1)].field_0):
                            if not parentTokenAddress:
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)].field_0) > block.number:
                                if not parentTokenAddress:
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require ext_code.size(parentTokenAddress)
                                    if block.number < parentSnapShotBlock:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), block.number
                                    else:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                if not uint256(stor8[address(arg1)].field_0):
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        require 0 < uint256(stor8[address(arg1)].field_0)
                                        if block.number < uint128(stor8[address(arg1)].field_0):
                                            require 0 >= arg2
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        idx = stor10.length + 1
                                                        while stor10.length > idx:
                                                            uint128(stor10[idx].field_0) = 0
                                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                        else:
                                            s = 0
                                            idx = 0
                                            while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                                require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                                mem[0] = sha3(address(arg1), 8)
                                                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                    idx = idx
                                                    continue 
                                                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                continue 
                                            require idx < uint256(stor8[address(arg1)].field_0)
                                            require uint128(stor8[address(arg1)][idx].field_128) >= arg2
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(-arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = stor10.length + 1
                                                        while stor10.length > s:
                                                            uint128(stor10[s].field_0) = 0
                                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(-arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    s = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > s:
                                                        uint128(stor8[address(arg1)][s].field_0) = 0
                                                        uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > s:
                                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) - arg2)
                    else:
                        s = 0
                        idx = 0
                        while stor10.length - 1 > idx:
                            require stor10.length + idx / 2 < stor10.length
                            mem[0] = 10
                            if uint128(stor10[0.5 / stor10.length + idx].field_0) > block.number:
                                s = stor10.length + idx / 2
                                idx = idx
                                continue 
                            s = stor10.length + idx / 2
                            idx = stor10.length + idx / 2
                            continue 
                        require idx < stor10.length
                        require uint128(stor10[idx].field_128) >= arg2
                        if not uint256(stor8[address(arg1)].field_0):
                            if not parentTokenAddress:
                                require 0 >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] >= arg2
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)].field_0) > block.number:
                                if not parentTokenAddress:
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require ext_code.size(parentTokenAddress)
                                    if block.number < parentSnapShotBlock:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), block.number
                                    else:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] - arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] - arg2)
                            else:
                                if not uint256(stor8[address(arg1)].field_0):
                                    require 0 >= arg2
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= arg2
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) - arg2)
                                    else:
                                        require 0 < uint256(stor8[address(arg1)].field_0)
                                        if block.number < uint128(stor8[address(arg1)].field_0):
                                            require 0 >= arg2
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = stor10.length + 1
                                                        while stor10.length > s:
                                                            uint128(stor10[s].field_0) = 0
                                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(-arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(-arg2)
                                        else:
                                            t = 0
                                            s = 0
                                            while uint256(stor8[address(arg1)].field_0) - 1 > s:
                                                require uint256(stor8[address(arg1)].field_0) + s / 2 < uint256(stor8[address(arg1)].field_0)
                                                mem[0] = sha3(address(arg1), 8)
                                                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + s].field_0) > block.number:
                                                    t = uint256(stor8[address(arg1)].field_0) + s / 2
                                                    s = s
                                                    continue 
                                                t = uint256(stor8[address(arg1)].field_0) + s / 2
                                                s = uint256(stor8[address(arg1)].field_0) + s / 2
                                                continue 
                                            require s < uint256(stor8[address(arg1)].field_0)
                                            require uint128(stor8[address(arg1)][s].field_128) >= arg2
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = stor10.length + 1
                                                    while stor10.length > t:
                                                        uint128(stor10[t].field_0) = 0
                                                        uint256(stor10[t].field_0) = uint128(stor10[t].field_0)
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) - arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = stor10.length + 1
                                                        while stor10.length > t:
                                                            uint128(stor10[t].field_0) = 0
                                                            uint256(stor10[t].field_0) = uint128(stor10[t].field_0)
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) - arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][s].field_128) - arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][s].field_128) - arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][s].field_128) - arg2)
    emit Transfer(arg2, arg1, 0);
    return 1
}

function generateTokens(address arg1, uint256 arg2) {
    require msg.sender == controllerAddress
    require not stor13
    require msg.sender == controllerAddress
    if not stor10.length:
        if not parentTokenAddress:
            require arg2 >= 0
            if not uint256(stor8[address(arg1)].field_0):
                if not parentTokenAddress:
                    require arg2 >= 0
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                else:
                    require ext_code.size(parentTokenAddress)
                    if block.number < parentSnapShotBlock:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), block.number
                    else:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), parentSnapShotBlock
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
            else:
                require 0 < uint256(stor8[address(arg1)].field_0)
                if uint128(stor8[address(arg1)].field_0) > block.number:
                    if not parentTokenAddress:
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                else:
                    if not uint256(stor8[address(arg1)].field_0):
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if block.number < uint128(stor8[address(arg1)].field_0):
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                s = 0
                                idx = 0
                                while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                    require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                    mem[0] = sha3(address(arg1), 8)
                                    if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = idx
                                        continue 
                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    continue 
                                require idx < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > s:
                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
        else:
            require ext_code.size(parentTokenAddress)
            if block.number < parentSnapShotBlock:
                call parentTokenAddress.0x981b24d0 with:
                     gas gas_remaining wei
                    args block.number
            else:
                call parentTokenAddress.0x981b24d0 with:
                     gas gas_remaining wei
                    args parentSnapShotBlock
            if not ext_call.success:
                revert with ext_call.return_data[0 len return_data.size]
            require return_data.size >= 32
            require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
            if not uint256(stor8[address(arg1)].field_0):
                if not parentTokenAddress:
                    require arg2 >= 0
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                else:
                    require ext_code.size(parentTokenAddress)
                    if block.number < parentSnapShotBlock:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), block.number
                    else:
                        call parentTokenAddress.0x4ee2cd7e with:
                             gas gas_remaining wei
                            args address(arg1), parentSnapShotBlock
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                    if not stor10.length:
                        stor10.length++
                        if stor10.length > stor10.length + 1:
                            idx = stor10.length + 1
                            while stor10.length > idx:
                                uint128(stor10[idx].field_0) = 0
                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                idx = idx + 1
                                continue 
                        require stor10.length < stor10.length
                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        require stor10.length - 1 < stor10.length
                        if uint128(stor10[stor10.length].field_0) >= block.number:
                            require stor10.length - 1 < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                    if not uint256(stor8[address(arg1)].field_0):
                        uint256(stor8[address(arg1)].field_0)++
                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                            idx = uint256(stor8[address(arg1)].field_0) + 1
                            while uint256(stor8[address(arg1)].field_0) > idx:
                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                idx = idx + 1
                                continue 
                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
            else:
                require 0 < uint256(stor8[address(arg1)].field_0)
                if uint128(stor8[address(arg1)].field_0) > block.number:
                    if not parentTokenAddress:
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                else:
                    if not uint256(stor8[address(arg1)].field_0):
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                        if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if block.number < uint128(stor8[address(arg1)].field_0):
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                s = 0
                                idx = 0
                                while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                    require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                    mem[0] = sha3(address(arg1), 8)
                                    if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = idx
                                        continue 
                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                    continue 
                                require idx < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > s:
                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
    else:
        require 0 < stor10.length
        if uint128(stor10.field_0) > block.number:
            if not parentTokenAddress:
                require arg2 >= 0
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
            else:
                require ext_code.size(parentTokenAddress)
                if block.number < parentSnapShotBlock:
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args block.number
                else:
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args parentSnapShotBlock
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
        else:
            if not stor10.length:
                require arg2 >= 0
                if not uint256(stor8[address(arg1)].field_0):
                    if not parentTokenAddress:
                        require arg2 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                    else:
                        require ext_code.size(parentTokenAddress)
                        if block.number < parentSnapShotBlock:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), block.number
                        else:
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(arg1), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                idx = stor10.length + 1
                                while stor10.length > idx:
                                    uint128(stor10[idx].field_0) = 0
                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                        if not uint256(stor8[address(arg1)].field_0):
                            uint256(stor8[address(arg1)].field_0)++
                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                while uint256(stor8[address(arg1)].field_0) > idx:
                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                    idx = idx + 1
                                    continue 
                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                else:
                    require 0 < uint256(stor8[address(arg1)].field_0)
                    if uint128(stor8[address(arg1)].field_0) > block.number:
                        if not parentTokenAddress:
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        if not uint256(stor8[address(arg1)].field_0):
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                            if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                            else:
                                require 0 < uint256(stor8[address(arg1)].field_0)
                                if block.number < uint128(stor8[address(arg1)].field_0):
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    s = 0
                                    idx = 0
                                    while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                        require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                        mem[0] = sha3(address(arg1), 8)
                                        if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = idx
                                            continue 
                                        s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                        continue 
                                    require idx < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            s = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > s:
                                                uint128(stor8[address(arg1)][s].field_0) = 0
                                                uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
            else:
                require stor10.length - 1 < stor10.length
                if block.number >= uint128(stor10[stor10.length].field_0):
                    require stor10.length - 1 < stor10.length
                    require uint128(stor10[stor10.length].field_0) + arg2 >= uint128(stor10[stor10.length].field_0)
                    if not uint256(stor8[address(arg1)].field_0):
                        if not parentTokenAddress:
                            require arg2 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                        else:
                            require ext_code.size(parentTokenAddress)
                            if block.number < parentSnapShotBlock:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), block.number
                            else:
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(arg1), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    idx = stor10.length + 1
                                    while stor10.length > idx:
                                        uint128(stor10[idx].field_0) = 0
                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                            if not uint256(stor8[address(arg1)].field_0):
                                uint256(stor8[address(arg1)].field_0)++
                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                        idx = idx + 1
                                        continue 
                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                    else:
                        require 0 < uint256(stor8[address(arg1)].field_0)
                        if uint128(stor8[address(arg1)].field_0) > block.number:
                            if not parentTokenAddress:
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            if not uint256(stor8[address(arg1)].field_0):
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                else:
                                    require 0 < uint256(stor8[address(arg1)].field_0)
                                    if block.number < uint128(stor8[address(arg1)].field_0):
                                        require arg2 >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        s = 0
                                        idx = 0
                                        while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                            require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                            mem[0] = sha3(address(arg1), 8)
                                            if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                idx = idx
                                                continue 
                                            s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                            continue 
                                        require idx < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                s = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > s:
                                                    uint128(stor8[address(arg1)][s].field_0) = 0
                                                    uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    s = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > s:
                                                        uint128(stor8[address(arg1)][s].field_0) = 0
                                                        uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                else:
                    require 0 < stor10.length
                    if block.number < uint128(stor10.field_0):
                        require arg2 >= 0
                        if not uint256(stor8[address(arg1)].field_0):
                            if not parentTokenAddress:
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        idx = stor10.length + 1
                                        while stor10.length > idx:
                                            uint128(stor10[idx].field_0) = 0
                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)].field_0) > block.number:
                                if not parentTokenAddress:
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require ext_code.size(parentTokenAddress)
                                    if block.number < parentSnapShotBlock:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), block.number
                                    else:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                if not uint256(stor8[address(arg1)].field_0):
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            idx = stor10.length + 1
                                            while stor10.length > idx:
                                                uint128(stor10[idx].field_0) = 0
                                                uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                idx = stor10.length + 1
                                                while stor10.length > idx:
                                                    uint128(stor10[idx].field_0) = 0
                                                    uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        require 0 < uint256(stor8[address(arg1)].field_0)
                                        if block.number < uint128(stor8[address(arg1)].field_0):
                                            require arg2 >= 0
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    idx = stor10.length + 1
                                                    while stor10.length > idx:
                                                        uint128(stor10[idx].field_0) = 0
                                                        uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        idx = stor10.length + 1
                                                        while stor10.length > idx:
                                                            uint128(stor10[idx].field_0) = 0
                                                            uint256(stor10[idx].field_0) = uint128(stor10[idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                        else:
                                            s = 0
                                            idx = 0
                                            while uint256(stor8[address(arg1)].field_0) - 1 > idx:
                                                require uint256(stor8[address(arg1)].field_0) + idx / 2 < uint256(stor8[address(arg1)].field_0)
                                                mem[0] = sha3(address(arg1), 8)
                                                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + idx].field_0) > block.number:
                                                    s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                    idx = idx
                                                    continue 
                                                s = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                idx = uint256(stor8[address(arg1)].field_0) + idx / 2
                                                continue 
                                            require idx < uint256(stor8[address(arg1)].field_0)
                                            require uint128(stor8[address(arg1)][idx].field_128) + arg2 >= uint128(stor8[address(arg1)][idx].field_128)
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = stor10.length + 1
                                                        while stor10.length > s:
                                                            uint128(stor10[s].field_0) = 0
                                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    s = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > s:
                                                        uint128(stor8[address(arg1)][s].field_0) = 0
                                                        uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        s = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > s:
                                                            uint128(stor8[address(arg1)][s].field_0) = 0
                                                            uint256(stor8[address(arg1)][s].field_0) = uint128(stor8[address(arg1)][s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][idx].field_128) + arg2)
                    else:
                        s = 0
                        idx = 0
                        while stor10.length - 1 > idx:
                            require stor10.length + idx / 2 < stor10.length
                            mem[0] = 10
                            if uint128(stor10[0.5 / stor10.length + idx].field_0) > block.number:
                                s = stor10.length + idx / 2
                                idx = idx
                                continue 
                            s = stor10.length + idx / 2
                            idx = stor10.length + idx / 2
                            continue 
                        require idx < stor10.length
                        require uint128(stor10[idx].field_128) + arg2 >= uint128(stor10[idx].field_128)
                        if not uint256(stor8[address(arg1)].field_0):
                            if not parentTokenAddress:
                                require arg2 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                            else:
                                require ext_code.size(parentTokenAddress)
                                if block.number < parentSnapShotBlock:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), block.number
                                else:
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(arg1), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = stor10.length + 1
                                        while stor10.length > s:
                                            uint128(stor10[s].field_0) = 0
                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                if not uint256(stor8[address(arg1)].field_0):
                                    uint256(stor8[address(arg1)].field_0)++
                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                            idx = idx + 1
                                            continue 
                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                        else:
                            require 0 < uint256(stor8[address(arg1)].field_0)
                            if uint128(stor8[address(arg1)].field_0) > block.number:
                                if not parentTokenAddress:
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require ext_code.size(parentTokenAddress)
                                    if block.number < parentSnapShotBlock:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), block.number
                                    else:
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args address(arg1), parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] + arg2 >= ext_call.return_data[0]
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(ext_call.return_data[0] + arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(ext_call.return_data[0] + arg2)
                            else:
                                if not uint256(stor8[address(arg1)].field_0):
                                    require arg2 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = stor10.length + 1
                                            while stor10.length > s:
                                                uint128(stor10[s].field_0) = 0
                                                uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                    if not uint256(stor8[address(arg1)].field_0):
                                        uint256(stor8[address(arg1)].field_0)++
                                        if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                            idx = uint256(stor8[address(arg1)].field_0) + 1
                                            while uint256(stor8[address(arg1)].field_0) > idx:
                                                uint128(stor8[address(arg1)][idx].field_0) = 0
                                                uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                idx = idx + 1
                                                continue 
                                        require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                    else:
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                        else:
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                else:
                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                    if block.number >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0):
                                        require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                        require uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2 >= uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = stor10.length + 1
                                                while stor10.length > s:
                                                    uint128(stor10[s].field_0) = 0
                                                    uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                        if not uint256(stor8[address(arg1)].field_0):
                                            uint256(stor8[address(arg1)].field_0)++
                                            if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                idx = uint256(stor8[address(arg1)].field_0) + 1
                                                while uint256(stor8[address(arg1)].field_0) > idx:
                                                    uint128(stor8[address(arg1)][idx].field_0) = 0
                                                    uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                    idx = idx + 1
                                                    continue 
                                            require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                        else:
                                            require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                            if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                            else:
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) + arg2)
                                    else:
                                        require 0 < uint256(stor8[address(arg1)].field_0)
                                        if block.number < uint128(stor8[address(arg1)].field_0):
                                            require arg2 >= 0
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = stor10.length + 1
                                                    while stor10.length > s:
                                                        uint128(stor10[s].field_0) = 0
                                                        uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = stor10.length + 1
                                                        while stor10.length > s:
                                                            uint128(stor10[s].field_0) = 0
                                                            uint256(stor10[s].field_0) = uint128(stor10[s].field_0)
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(arg2)
                                        else:
                                            t = 0
                                            s = 0
                                            while uint256(stor8[address(arg1)].field_0) - 1 > s:
                                                require uint256(stor8[address(arg1)].field_0) + s / 2 < uint256(stor8[address(arg1)].field_0)
                                                mem[0] = sha3(address(arg1), 8)
                                                if uint128(stor8[address(arg1)][0.5 / uint256(stor8[address(arg1)].field_0) + s].field_0) > block.number:
                                                    t = uint256(stor8[address(arg1)].field_0) + s / 2
                                                    s = s
                                                    continue 
                                                t = uint256(stor8[address(arg1)].field_0) + s / 2
                                                s = uint256(stor8[address(arg1)].field_0) + s / 2
                                                continue 
                                            require s < uint256(stor8[address(arg1)].field_0)
                                            require uint128(stor8[address(arg1)][s].field_128) + arg2 >= uint128(stor8[address(arg1)][s].field_128)
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = stor10.length + 1
                                                    while stor10.length > t:
                                                        uint128(stor10[t].field_0) = 0
                                                        uint256(stor10[t].field_0) = uint128(stor10[t].field_0)
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[idx].field_128) + arg2)
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = stor10.length + 1
                                                        while stor10.length > t:
                                                            uint128(stor10[t].field_0) = 0
                                                            uint256(stor10[t].field_0) = uint128(stor10[t].field_0)
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[idx].field_128) + arg2)
                                            if not uint256(stor8[address(arg1)].field_0):
                                                uint256(stor8[address(arg1)].field_0)++
                                                if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                    idx = uint256(stor8[address(arg1)].field_0) + 1
                                                    while uint256(stor8[address(arg1)].field_0) > idx:
                                                        uint128(stor8[address(arg1)][idx].field_0) = 0
                                                        uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                        idx = idx + 1
                                                        continue 
                                                require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][s].field_128) + arg2)
                                            else:
                                                require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                if uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(arg1)].field_0) - 1 < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(uint128(stor8[address(arg1)][s].field_128) + arg2)
                                                else:
                                                    uint256(stor8[address(arg1)].field_0)++
                                                    if uint256(stor8[address(arg1)].field_0) > uint256(stor8[address(arg1)].field_0) + 1:
                                                        idx = uint256(stor8[address(arg1)].field_0) + 1
                                                        while uint256(stor8[address(arg1)].field_0) > idx:
                                                            uint128(stor8[address(arg1)][idx].field_0) = 0
                                                            uint256(stor8[address(arg1)][idx].field_0) = uint128(stor8[address(arg1)][idx].field_0)
                                                            idx = idx + 1
                                                            continue 
                                                    require uint256(stor8[address(arg1)].field_0) < uint256(stor8[address(arg1)].field_0)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(arg1)][uint256(stor8[address(arg1)].field_0)].field_128) = uint128(uint128(stor8[address(arg1)][s].field_128) + arg2)
    emit Transfer(arg2, 0, arg1);
    return 1
}

function initTokens(address[] arg1, uint256[] arg2, bool arg3, bool arg4) {
    mem[128 len 32 * arg1.length] = call.data[arg1 + 36 len 32 * arg1.length]
    mem[(32 * arg1.length) + 128] = arg2.length
    mem[(32 * arg1.length) + 160 len 32 * arg2.length] = call.data[arg2 + 36 len 32 * arg2.length]
    require msg.sender == controllerAddress
    require not stor13
    require arg1.length == arg2.length
    idx = 0
    while idx < arg1.length:
        require idx < arg1.length
        require mem[(32 * idx) + 140 len 20]
        require idx < arg2.length
        require mem[(32 * idx) + (32 * arg1.length) + 160] > 0
        require idx < arg1.length
        _10602 = mem[(32 * idx) + 128]
        require idx < arg2.length
        _10604 = mem[(32 * idx) + (32 * arg1.length) + 160]
        require msg.sender == controllerAddress
        if not stor10.length:
            if not parentTokenAddress:
                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                    if not parentTokenAddress:
                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                s = sha3(10) + stor10.length + 1
                                while sha3(10) + stor10.length > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                        mem[32] = 8
                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                        else:
                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                    else:
                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                        if block.number < parentSnapShotBlock:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                            require ext_code.size(parentTokenAddress)
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                            require ext_code.size(parentTokenAddress)
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                s = sha3(10) + stor10.length + 1
                                while sha3(10) + stor10.length > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(_10604)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(_10604)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(_10604)
                        mem[32] = 8
                        if not uint256(stor8[address(_10602)].field_0):
                            uint256(stor8[address(_10602)].field_0)++
                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                            mem[0] = sha3(address(_10602), 8)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                        else:
                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                        emit Transfer(_10604, 0, address(_10602));
                else:
                    require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                    if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[32] = 8
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                        else:
                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                            if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                            else:
                                require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    s = 0
                                    s = 0
                                    while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > s:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s].field_0) > block.number:
                                            s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                            s = s
                                            continue 
                                        s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                        s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                        continue 
                                    require s < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    require uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            t = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                    else:
                        if not parentTokenAddress:
                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[32] = 8
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                            if block.number < parentSnapShotBlock:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                            emit Transfer(_10604, 0, address(_10602));
            else:
                if block.number < parentSnapShotBlock:
                    mem[(32 * arg1.length) + (32 * arg2.length) + 164] = block.number
                    require ext_code.size(parentTokenAddress)
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args block.number
                else:
                    mem[(32 * arg1.length) + (32 * arg2.length) + 164] = parentSnapShotBlock
                    require ext_code.size(parentTokenAddress)
                    call parentTokenAddress.0x981b24d0 with:
                         gas gas_remaining wei
                        args parentSnapShotBlock
                if not ext_call.success:
                    revert with ext_call.return_data[0 len return_data.size]
                require return_data.size >= 32
                require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                if not uint256(stor8[address(_10602)].field_0):
                    if not parentTokenAddress:
                        require _10604 >= 0
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                s = sha3(10) + stor10.length + 1
                                while sha3(10) + stor10.length > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                        mem[32] = 8
                        if not uint256(stor8[address(_10602)].field_0):
                            uint256(stor8[address(_10602)].field_0)++
                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                            mem[0] = sha3(address(_10602), 8)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                        else:
                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                            else:
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                    else:
                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = address(_10602)
                        if block.number < parentSnapShotBlock:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                            require ext_code.size(parentTokenAddress)
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(_10602), block.number
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                            require ext_code.size(parentTokenAddress)
                            call parentTokenAddress.0x4ee2cd7e with:
                                 gas gas_remaining wei
                                args address(_10602), parentSnapShotBlock
                        if not ext_call.success:
                            revert with ext_call.return_data[0 len return_data.size]
                        require return_data.size >= 32
                        require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                        if not stor10.length:
                            stor10.length++
                            if stor10.length > stor10.length + 1:
                                s = sha3(10) + stor10.length + 1
                                while sha3(10) + stor10.length > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require stor10.length < stor10.length
                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                        else:
                            require stor10.length - 1 < stor10.length
                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                require stor10.length - 1 < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                        mem[32] = 8
                        if not uint256(stor8[address(_10602)].field_0):
                            uint256(stor8[address(_10602)].field_0)++
                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                    uint128(stor[s]) = 0
                                    uint256(stor[s]) = uint128(stor[s])
                                    s = s + 1
                                    continue 
                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                            mem[0] = sha3(address(_10602), 8)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                        else:
                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                else:
                    require 0 < uint256(stor8[address(_10602)].field_0)
                    if uint128(stor8[address(_10602)].field_0) <= block.number:
                        if not uint256(stor8[address(_10602)].field_0):
                            require _10604 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                        else:
                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                            if block.number >= uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0):
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                require uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604 >= uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0)
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                            else:
                                require 0 < uint256(stor8[address(_10602)].field_0)
                                if block.number < uint128(stor8[address(_10602)].field_0):
                                    require _10604 >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                else:
                                    t = 0
                                    s = 0
                                    while uint256(stor8[address(_10602)].field_0) - 1 > s:
                                        require uint256(stor8[address(_10602)].field_0) + s / 2 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        if uint128(stor8[address(_10602)][0.5 / uint256(stor8[address(_10602)].field_0) + s].field_0) > block.number:
                                            t = uint256(stor8[address(_10602)].field_0) + s / 2
                                            s = s
                                            continue 
                                        t = uint256(stor8[address(_10602)].field_0) + s / 2
                                        s = uint256(stor8[address(_10602)].field_0) + s / 2
                                        continue 
                                    require s < uint256(stor8[address(_10602)].field_0)
                                    require uint128(stor8[address(_10602)][s].field_128) + _10604 >= uint128(stor8[address(_10602)][s].field_128)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            t = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            t = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                t = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                    else:
                        if not parentTokenAddress:
                            require _10604 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 164] = address(_10602)
                            if block.number < parentSnapShotBlock:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(_10602), block.number
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(_10602), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                emit Transfer(_10604, 0, address(_10602));
        else:
            require 0 < stor10.length
            if uint128(stor10.field_0) <= block.number:
                if not stor10.length:
                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                    if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                        if not parentTokenAddress:
                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[32] = 8
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                            if block.number < parentSnapShotBlock:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                            emit Transfer(_10604, 0, address(_10602));
                    else:
                        require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                        if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                else:
                                    require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        s = 0
                                        s = 0
                                        while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > s:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s].field_0) > block.number:
                                                s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                s = s
                                                continue 
                                            s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                            s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                            continue 
                                        require s < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        require uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                        else:
                            if not parentTokenAddress:
                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                if block.number < parentSnapShotBlock:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                emit Transfer(_10604, 0, address(_10602));
                else:
                    require stor10.length - 1 < stor10.length
                    if block.number >= uint128(stor10[stor10.length].field_0):
                        require stor10.length - 1 < stor10.length
                        require uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor10[stor10.length].field_0)
                        if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                            if not parentTokenAddress:
                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                if block.number < parentSnapShotBlock:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                emit Transfer(_10604, 0, address(_10602));
                        else:
                            require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                            if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            mem[32] = 8
                                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            s = 0
                                            s = 0
                                            while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > s:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s].field_0) > block.number:
                                                    s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                    s = s
                                                    continue 
                                                s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                continue 
                                            require s < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            require uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128)
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            mem[32] = 8
                                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                            else:
                                if not parentTokenAddress:
                                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                    if block.number < parentSnapShotBlock:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                    else:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[stor10.length].field_0) + _10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                    emit Transfer(_10604, 0, address(_10602));
                    else:
                        require 0 < stor10.length
                        if block.number < uint128(stor10.field_0):
                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                            if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                                if not parentTokenAddress:
                                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                    if block.number < parentSnapShotBlock:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                    else:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                    emit Transfer(_10604, 0, address(_10602));
                            else:
                                require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            mem[32] = 8
                                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                                if not stor10.length:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        s = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    require stor10.length - 1 < stor10.length
                                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                                        require stor10.length - 1 < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                    else:
                                                        stor10.length++
                                                        if stor10.length > stor10.length + 1:
                                                            s = sha3(10) + stor10.length + 1
                                                            while sha3(10) + stor10.length > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                mem[32] = 8
                                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                    else:
                                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                s = 0
                                                s = 0
                                                while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > s:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s].field_0) > block.number:
                                                        s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                        s = s
                                                        continue 
                                                    s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                    s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                    continue 
                                                require s < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                require uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128)
                                                if not stor10.length:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    require stor10.length - 1 < stor10.length
                                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                                        require stor10.length - 1 < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                    else:
                                                        stor10.length++
                                                        if stor10.length > stor10.length + 1:
                                                            t = sha3(10) + stor10.length + 1
                                                            while sha3(10) + stor10.length > t:
                                                                uint128(stor[t]) = 0
                                                                uint256(stor[t]) = uint128(stor[t])
                                                                t = t + 1
                                                                continue 
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                mem[32] = 8
                                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    else:
                                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                            t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                                uint128(stor[t]) = 0
                                                                uint256(stor[t]) = uint128(stor[t])
                                                                t = t + 1
                                                                continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                else:
                                    if not parentTokenAddress:
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                    else:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                        if block.number < parentSnapShotBlock:
                                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                            require ext_code.size(parentTokenAddress)
                                            call parentTokenAddress.0x4ee2cd7e with:
                                                 gas gas_remaining wei
                                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                        else:
                                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                            require ext_code.size(parentTokenAddress)
                                            call parentTokenAddress.0x4ee2cd7e with:
                                                 gas gas_remaining wei
                                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                        mem[32] = 8
                                        if not uint256(stor8[address(_10602)].field_0):
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                            else:
                                                uint256(stor8[address(_10602)].field_0)++
                                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                        emit Transfer(_10604, 0, address(_10602));
                        else:
                            t = 0
                            s = 0
                            while stor10.length - 1 > s:
                                require stor10.length + s / 2 < stor10.length
                                mem[0] = 10
                                if uint128(stor10[0.5 / stor10.length + s].field_0) > block.number:
                                    t = stor10.length + s / 2
                                    s = s
                                    continue 
                                t = stor10.length + s / 2
                                s = stor10.length + s / 2
                                continue 
                            require s < stor10.length
                            require uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor10[s].field_128)
                            if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                                if not parentTokenAddress:
                                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            t = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                    if block.number < parentSnapShotBlock:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                    else:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                        require ext_code.size(parentTokenAddress)
                                        call parentTokenAddress.0x4ee2cd7e with:
                                             gas gas_remaining wei
                                            args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                    if not ext_call.success:
                                        revert with ext_call.return_data[0 len return_data.size]
                                    require return_data.size >= 32
                                    require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            t = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > t:
                                                uint128(stor[t]) = 0
                                                uint256(stor[t]) = uint128(stor[t])
                                                t = t + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + _10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + _10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + _10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                    emit Transfer(_10604, 0, address(_10602));
                            else:
                                require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                            if not stor10.length:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            mem[32] = 8
                                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                                if not stor10.length:
                                                    stor10.length++
                                                    if stor10.length > stor10.length + 1:
                                                        t = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > t:
                                                            uint128(stor[t]) = 0
                                                            uint256(stor[t]) = uint128(stor[t])
                                                            t = t + 1
                                                            continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    require stor10.length - 1 < stor10.length
                                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                                        require stor10.length - 1 < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    else:
                                                        stor10.length++
                                                        if stor10.length > stor10.length + 1:
                                                            t = sha3(10) + stor10.length + 1
                                                            while sha3(10) + stor10.length > t:
                                                                uint128(stor[t]) = 0
                                                                uint256(stor[t]) = uint128(stor[t])
                                                                t = t + 1
                                                                continue 
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                mem[32] = 8
                                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                            uint128(stor[s]) = 0
                                                            uint256(stor[s]) = uint128(stor[s])
                                                            s = s + 1
                                                            continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                else:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                                    else:
                                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                t = 0
                                                t = 0
                                                while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > t:
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + t / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + t].field_0) > block.number:
                                                        t = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + t / 2
                                                        t = t
                                                        continue 
                                                    t = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + t / 2
                                                    t = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + t / 2
                                                    continue 
                                                require t < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                require uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128)
                                                if not stor10.length:
                                                    stor10.length++
                                                    if stor10.length <= stor10.length + 1:
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[32] = 8
                                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                    uint128(stor[s]) = 0
                                                                    uint256(stor[s]) = uint128(stor[s])
                                                                    s = s + 1
                                                                    continue 
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        else:
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                            else:
                                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                        uint128(stor[s]) = 0
                                                                        uint256(stor[s]) = uint128(stor[s])
                                                                        s = s + 1
                                                                        continue 
                                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                        idx = idx + 1
                                                        continue 
                                                    u = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > u:
                                                        uint128(stor[u]) = 0
                                                        uint256(stor[u]) = uint128(stor[u])
                                                        u = u + 1
                                                        continue 
                                                    require stor10.length < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                    uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    mem[32] = 8
                                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                        idx = idx + 1
                                                        continue 
                                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                        idx = idx + 1
                                                        continue 
                                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) <= uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                        idx = idx + 1
                                                        continue 
                                                    s = sha3(sha3(address(mem[(32 * s) + 128]), 8)) + uint256(stor8[address(mem[(32 * s) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * s) + 128]), 8)) + uint256(stor8[address(mem[(32 * s) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                    require uint256(stor8[address(mem[(32 * s) + 128])].field_0) < uint256(stor8[address(mem[(32 * s) + 128])].field_0)
                                                    mem[0] = sha3(address(mem[(32 * s) + 128]), 8)
                                                    uint128(stor8[address(mem[(32 * s) + 128])][uint256(stor8[address(mem[(32 * s) + 128])].field_0)].field_0) = uint128(block.number)
                                                    uint128(stor8[address(mem[(32 * s) + 128])][uint256(stor8[address(mem[(32 * s) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * s) + 128])][t].field_128) + mem[(32 * s) + (32 * arg1.length) + 160])
                                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * s) + (32 * arg1.length) + 160]
                                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                    s = s + 1
                                                    continue 
                                                require stor10.length - 1 < stor10.length
                                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                                    require stor10.length - 1 < stor10.length
                                                    uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    mem[32] = 8
                                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    else:
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        else:
                                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                    uint128(stor[s]) = 0
                                                                    uint256(stor[s]) = uint128(stor[s])
                                                                    s = s + 1
                                                                    continue 
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                else:
                                                    stor10.length++
                                                    if stor10.length <= stor10.length + 1:
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[32] = 8
                                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                    uint128(stor[s]) = 0
                                                                    uint256(stor[s]) = uint128(stor[s])
                                                                    s = s + 1
                                                                    continue 
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        else:
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                            else:
                                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                        uint128(stor[s]) = 0
                                                                        uint256(stor[s]) = uint128(stor[s])
                                                                        s = s + 1
                                                                        continue 
                                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                    else:
                                                        u = sha3(10) + stor10.length + 1
                                                        while sha3(10) + stor10.length > u:
                                                            uint128(stor[u]) = 0
                                                            uint256(stor[u]) = uint128(stor[u])
                                                            u = u + 1
                                                            continue 
                                                        require stor10.length < stor10.length
                                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                        uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        mem[32] = 8
                                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) <= uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                                                emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                                idx = idx + 1
                                                                continue 
                                                            s = sha3(sha3(address(mem[(32 * s) + 128]), 8)) + uint256(stor8[address(mem[(32 * s) + 128])].field_0) + 1
                                                            while sha3(sha3(address(mem[(32 * s) + 128]), 8)) + uint256(stor8[address(mem[(32 * s) + 128])].field_0) > s:
                                                                uint128(stor[s]) = 0
                                                                uint256(stor[s]) = uint128(stor[s])
                                                                s = s + 1
                                                                continue 
                                                            require uint256(stor8[address(mem[(32 * s) + 128])].field_0) < uint256(stor8[address(mem[(32 * s) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * s) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * s) + 128])][uint256(stor8[address(mem[(32 * s) + 128])].field_0)].field_0) = uint128(block.number)
                                                            uint128(stor8[address(mem[(32 * s) + 128])][uint256(stor8[address(mem[(32 * s) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * s) + 128])][t].field_128) + mem[(32 * s) + (32 * arg1.length) + 160])
                                                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * s) + (32 * arg1.length) + 160]
                                                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                                            s = s + 1
                                                            continue 
                                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                                        else:
                                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                                    uint128(stor[s]) = 0
                                                                    uint256(stor[s]) = uint128(stor[s])
                                                                    s = s + 1
                                                                    continue 
                                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][t].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                    emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                else:
                                    if not parentTokenAddress:
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                        emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                                    else:
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                        if block.number < parentSnapShotBlock:
                                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                            require ext_code.size(parentTokenAddress)
                                            call parentTokenAddress.0x4ee2cd7e with:
                                                 gas gas_remaining wei
                                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                        else:
                                            mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                            require ext_code.size(parentTokenAddress)
                                            call parentTokenAddress.0x4ee2cd7e with:
                                                 gas gas_remaining wei
                                                args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                        if not ext_call.success:
                                            revert with ext_call.return_data[0 len return_data.size]
                                        require return_data.size >= 32
                                        require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + _10604)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(uint128(stor10[s].field_128) + _10604)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(uint128(stor10[s].field_128) + _10604)
                                        mem[32] = 8
                                        if not uint256(stor8[address(_10602)].field_0):
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                            else:
                                                uint256(stor8[address(_10602)].field_0)++
                                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                        emit Transfer(_10604, 0, address(_10602));
            else:
                if not parentTokenAddress:
                    require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                    if not uint256(stor8[mem[(32 * idx) + 140 len 20]].field_0):
                        if not parentTokenAddress:
                            require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[32] = 8
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                            if block.number < parentSnapShotBlock:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(_10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                            emit Transfer(_10604, 0, address(_10602));
                    else:
                        require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                        if uint128(stor8[address(mem[(32 * idx) + 128])].field_0) <= block.number:
                            if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                            else:
                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                if block.number >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0):
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    require uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    mem[32] = 8
                                    if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                    else:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                else:
                                    require 0 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if block.number < uint128(stor8[address(mem[(32 * idx) + 128])].field_0):
                                        require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        s = 0
                                        s = 0
                                        while uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 > s:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][0.5 / uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s].field_0) > block.number:
                                                s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                                s = s
                                                continue 
                                            s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                            s = uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + s / 2
                                            continue 
                                        require s < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        require uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160] >= uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                        mem[32] = 8
                                        if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                            uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                            if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                        else:
                                            require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                            if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                                            else:
                                                uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                                if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                                    t = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                                    while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                                mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = uint128(uint128(stor8[address(mem[(32 * idx) + 128])][s].field_128) + mem[(32 * idx) + (32 * arg1.length) + 160])
                            mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                            emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                        else:
                            if not parentTokenAddress:
                                require mem[(32 * idx) + (32 * arg1.length) + 160] >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[32] = 8
                                if not uint256(stor8[address(mem[(32 * idx) + 128])].field_0):
                                    uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                    if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                        s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                        while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                else:
                                    require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                    if uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) - 1 < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                    else:
                                        uint256(stor8[address(mem[(32 * idx) + 128])].field_0)++
                                        if uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1:
                                            s = sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) + 1
                                            while sha3(sha3(address(mem[(32 * idx) + 128]), 8)) + uint256(stor8[address(mem[(32 * idx) + 128])].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(mem[(32 * idx) + 128])].field_0) < uint256(stor8[address(mem[(32 * idx) + 128])].field_0)
                                        mem[0] = sha3(address(mem[(32 * idx) + 128]), 8)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(mem[(32 * idx) + 128])][uint256(stor8[address(mem[(32 * idx) + 128])].field_0)].field_128) = mem[(32 * idx) + (32 * arg1.length) + 176 len 16]
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = mem[(32 * idx) + (32 * arg1.length) + 160]
                                emit Transfer(mem[(32 * arg1.length) + (32 * arg2.length) + 160], 0, address(_10602));
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 164] = mem[(32 * idx) + 140 len 20]
                                if block.number < parentSnapShotBlock:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], block.number
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args mem[(32 * arg1.length) + (32 * arg2.length) + 164], parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(_10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(_10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                                emit Transfer(_10604, 0, address(_10602));
                else:
                    if block.number < parentSnapShotBlock:
                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = block.number
                        require ext_code.size(parentTokenAddress)
                        call parentTokenAddress.0x981b24d0 with:
                             gas gas_remaining wei
                            args block.number
                    else:
                        mem[(32 * arg1.length) + (32 * arg2.length) + 164] = parentSnapShotBlock
                        require ext_code.size(parentTokenAddress)
                        call parentTokenAddress.0x981b24d0 with:
                             gas gas_remaining wei
                            args parentSnapShotBlock
                    if not ext_call.success:
                        revert with ext_call.return_data[0 len return_data.size]
                    require return_data.size >= 32
                    require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                    if not uint256(stor8[address(_10602)].field_0):
                        if not parentTokenAddress:
                            require _10604 >= 0
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                        else:
                            mem[(32 * arg1.length) + (32 * arg2.length) + 164] = address(_10602)
                            if block.number < parentSnapShotBlock:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(_10602), block.number
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                require ext_code.size(parentTokenAddress)
                                call parentTokenAddress.0x4ee2cd7e with:
                                     gas gas_remaining wei
                                    args address(_10602), parentSnapShotBlock
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                            if not stor10.length:
                                stor10.length++
                                if stor10.length > stor10.length + 1:
                                    s = sha3(10) + stor10.length + 1
                                    while sha3(10) + stor10.length > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require stor10.length < stor10.length
                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require stor10.length - 1 < stor10.length
                                if uint128(stor10[stor10.length].field_0) >= block.number:
                                    require stor10.length - 1 < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                            mem[32] = 8
                            if not uint256(stor8[address(_10602)].field_0):
                                uint256(stor8[address(_10602)].field_0)++
                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                        uint128(stor[s]) = 0
                                        uint256(stor[s]) = uint128(stor[s])
                                        s = s + 1
                                        continue 
                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                mem[0] = sha3(address(_10602), 8)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                    else:
                        require 0 < uint256(stor8[address(_10602)].field_0)
                        if uint128(stor8[address(_10602)].field_0) <= block.number:
                            if not uint256(stor8[address(_10602)].field_0):
                                require _10604 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                            else:
                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                if block.number >= uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0):
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    require uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604 >= uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0)
                                    if not stor10.length:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        require stor10.length - 1 < stor10.length
                                        if uint128(stor10[stor10.length].field_0) >= block.number:
                                            require stor10.length - 1 < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                    mem[32] = 8
                                    if not uint256(stor8[address(_10602)].field_0):
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                                    else:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                                        else:
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) + _10604)
                                else:
                                    require 0 < uint256(stor8[address(_10602)].field_0)
                                    if block.number < uint128(stor8[address(_10602)].field_0):
                                        require _10604 >= 0
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                s = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    s = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        mem[32] = 8
                                        if not uint256(stor8[address(_10602)].field_0):
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                    uint128(stor[s]) = 0
                                                    uint256(stor[s]) = uint128(stor[s])
                                                    s = s + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                        else:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                            else:
                                                uint256(stor8[address(_10602)].field_0)++
                                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                    s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                        uint128(stor[s]) = 0
                                                        uint256(stor[s]) = uint128(stor[s])
                                                        s = s + 1
                                                        continue 
                                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                    else:
                                        t = 0
                                        s = 0
                                        while uint256(stor8[address(_10602)].field_0) - 1 > s:
                                            require uint256(stor8[address(_10602)].field_0) + s / 2 < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            if uint128(stor8[address(_10602)][0.5 / uint256(stor8[address(_10602)].field_0) + s].field_0) > block.number:
                                                t = uint256(stor8[address(_10602)].field_0) + s / 2
                                                s = s
                                                continue 
                                            t = uint256(stor8[address(_10602)].field_0) + s / 2
                                            s = uint256(stor8[address(_10602)].field_0) + s / 2
                                            continue 
                                        require s < uint256(stor8[address(_10602)].field_0)
                                        require uint128(stor8[address(_10602)][s].field_128) + _10604 >= uint128(stor8[address(_10602)][s].field_128)
                                        if not stor10.length:
                                            stor10.length++
                                            if stor10.length > stor10.length + 1:
                                                t = sha3(10) + stor10.length + 1
                                                while sha3(10) + stor10.length > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require stor10.length < stor10.length
                                            uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                            uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        else:
                                            require stor10.length - 1 < stor10.length
                                            if uint128(stor10[stor10.length].field_0) >= block.number:
                                                require stor10.length - 1 < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                            else:
                                                stor10.length++
                                                if stor10.length > stor10.length + 1:
                                                    t = sha3(10) + stor10.length + 1
                                                    while sha3(10) + stor10.length > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require stor10.length < stor10.length
                                                uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                                uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                        mem[32] = 8
                                        if not uint256(stor8[address(_10602)].field_0):
                                            uint256(stor8[address(_10602)].field_0)++
                                            if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                t = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > t:
                                                    uint128(stor[t]) = 0
                                                    uint256(stor[t]) = uint128(stor[t])
                                                    t = t + 1
                                                    continue 
                                            require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                            mem[0] = sha3(address(_10602), 8)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                            uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                                        else:
                                            require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                            if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                                require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                                            else:
                                                uint256(stor8[address(_10602)].field_0)++
                                                if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                                    t = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                                    while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > t:
                                                        uint128(stor[t]) = 0
                                                        uint256(stor[t]) = uint128(stor[t])
                                                        t = t + 1
                                                        continue 
                                                require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                                mem[0] = sha3(address(_10602), 8)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                                uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(uint128(stor8[address(_10602)][s].field_128) + _10604)
                        else:
                            if not parentTokenAddress:
                                require _10604 >= 0
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(_10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(_10604)
                            else:
                                mem[(32 * arg1.length) + (32 * arg2.length) + 164] = address(_10602)
                                if block.number < parentSnapShotBlock:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = block.number
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(_10602), block.number
                                else:
                                    mem[(32 * arg1.length) + (32 * arg2.length) + 196] = parentSnapShotBlock
                                    require ext_code.size(parentTokenAddress)
                                    call parentTokenAddress.0x4ee2cd7e with:
                                         gas gas_remaining wei
                                        args address(_10602), parentSnapShotBlock
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                require ext_call.return_data[0] + _10604 >= ext_call.return_data[0]
                                if not stor10.length:
                                    stor10.length++
                                    if stor10.length > stor10.length + 1:
                                        s = sha3(10) + stor10.length + 1
                                        while sha3(10) + stor10.length > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require stor10.length < stor10.length
                                    uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                    uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require stor10.length - 1 < stor10.length
                                    if uint128(stor10[stor10.length].field_0) >= block.number:
                                        require stor10.length - 1 < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        stor10.length++
                                        if stor10.length > stor10.length + 1:
                                            s = sha3(10) + stor10.length + 1
                                            while sha3(10) + stor10.length > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require stor10.length < stor10.length
                                        uint128(stor10[stor10.length].field_0) = uint128(block.number)
                                        uint128(stor10[stor10.length].field_128) = uint128(ext_call.return_data[0] + _10604)
                                mem[32] = 8
                                if not uint256(stor8[address(_10602)].field_0):
                                    uint256(stor8[address(_10602)].field_0)++
                                    if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                        s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                        while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                            uint128(stor[s]) = 0
                                            uint256(stor[s]) = uint128(stor[s])
                                            s = s + 1
                                            continue 
                                    require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                    mem[0] = sha3(address(_10602), 8)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                    uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                                else:
                                    require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                    if uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) >= block.number:
                                        require uint256(stor8[address(_10602)].field_0) - 1 < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(ext_call.return_data[0] + _10604)
                                    else:
                                        uint256(stor8[address(_10602)].field_0)++
                                        if uint256(stor8[address(_10602)].field_0) > uint256(stor8[address(_10602)].field_0) + 1:
                                            s = sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) + 1
                                            while sha3(sha3(address(_10602), 8)) + uint256(stor8[address(_10602)].field_0) > s:
                                                uint128(stor[s]) = 0
                                                uint256(stor[s]) = uint128(stor[s])
                                                s = s + 1
                                                continue 
                                        require uint256(stor8[address(_10602)].field_0) < uint256(stor8[address(_10602)].field_0)
                                        mem[0] = sha3(address(_10602), 8)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_0) = uint128(block.number)
                                        uint128(stor8[address(_10602)][uint256(stor8[address(_10602)].field_0)].field_128) = uint128(ext_call.return_data[0] + _10604)
                    mem[(32 * arg1.length) + (32 * arg2.length) + 160] = _10604
                    emit Transfer(_10604, 0, address(_10602));
        idx = idx + 1
        continue 
    if arg3 == 1:
        require msg.sender == controllerAddress
        stor13 = 1
    if arg4 == 1:
        require msg.sender == controllerAddress
        transfersEnabled = 1
    return 1
}



}

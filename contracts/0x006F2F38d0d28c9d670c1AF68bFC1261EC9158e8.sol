contract main {




// =====================  Runtime code  =====================


uint256 stor0;
address stor1;
address stor2;

function _fallback() payable {
  stop
}

function getMaxBet() {
    require msg.sender == stor1
    return ((10 * 80 * eth.balance(stor2) / 100 / 19) - 1000)
}

function setNonce(uint256 arg1) {
    require calldata.size - 4 >= 32
    require msg.sender == stor1
    stor0 = arg1
}

function withdraw() {
    require msg.sender == stor1
    call stor1 with:
       value eth.balance(this.address) wei
         gas 2300 * is_zero(value) wei
    if not ext_call.success:
        revert with ext_call.return_data[0 len return_data.size]
}

function getBet(uint256 arg1) {
    require calldata.size - 4 >= 32
    require msg.sender == stor1
    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13:
        if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    return 2, 
                           arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                    return 1, 
                           arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                if 6 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                    return 2, 
                           arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > 6:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 >= 6:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
        else:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if 6 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if 6 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
    else:
        if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 > 6:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 >= 6:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > 6:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 >= 6:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
        else:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + 13 % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + 13 % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 1, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
                    if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 52) + 1 % 13) % 10 >= ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                        return 2, 
                               arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
    return 3, 
           arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, arg1) % 1000)) % 1000)) % 1000)) % 1000)
}

function doBet(uint256 arg1) payable {
    require calldata.size - 4 >= 32
    require msg.sender == stor1
    require msg.sender == stor1
    if arg1:
        if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
        else:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value arg1 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value arg1 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
    else:
        require msg.sender == stor1
        if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if 6 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if 6 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
        else:
            if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > 6:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < 6:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
            else:
                if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + 13 % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                else:
                    if not (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + 13 % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                    else:
                        if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 > ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                            mem[1300 len 0] = None
                            mem[1364 len 0] = None
                            mem[1428 len 0] = None
                            require ext_code.size(stor2)
                            call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                               value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                 gas gas_remaining wei
                                args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                            if not ext_call.success:
                                revert with ext_call.return_data[0 len return_data.size]
                            require return_data.size >= 32
                            if eth.balance(this.address) >= eth.balance(this.address):
                                revert with 0, 'Sanity check'
                            stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
                        else:
                            if ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 52) + 1 % 13) % 10 < ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 52) + 1 % 13) + ((sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 52) + 1 % 13) % 10:
                                mem[1300 len 0] = None
                                mem[1364 len 0] = None
                                mem[1428 len 0] = None
                                require ext_code.size(stor2)
                                call stor2.doBet(uint256[] arg1, uint256[] arg2, uint256[] arg3, uint256 arg4) with:
                                   value (10 * 80 * eth.balance(stor2) / 100 / 19) - 1000 wei
                                     gas gas_remaining wei
                                    args 128, 192, 256, 1, 1, mem[1300], 1, mem[1364], 1, mem[1428]
                                if not ext_call.success:
                                    revert with ext_call.return_data[0 len return_data.size]
                                require return_data.size >= 32
                                if eth.balance(this.address) >= eth.balance(this.address):
                                    revert with 0, 'Sanity check'
                                stor0 = stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000) + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0 + (sha3(block.hash(block.number - 1), block.timestamp, this.address, stor0) % 1000)) % 1000)) % 1000)) % 1000)
}



}

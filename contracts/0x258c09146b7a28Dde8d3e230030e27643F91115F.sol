contract main {


// =======================  Init code  ======================


const _fallback = code.data[19 len 1913]




// =====================  Runtime code  =====================


address stor0;
uint256 stor0;

function deleteContract() payable {
    if address(stor0) != msg.sender:
    selfdestruct(msg.sender)
}

function _fallback() payable {
  stop
}

function MarketsContract() payable {
    uint256(stor0) = msg.sender or Mask(96, 160, uint256(stor0))
}

function changeCreator(address arg1) payable {
    if address(stor0) == msg.sender:
        uint256(stor0) = arg1 or Mask(96, 160, uint256(stor0))
}

function sub_802a01f8(?) payable {
    s = 95
    idx = 191
    while idx != 1:
        if Mask(192, 64, arg1) >> 64 >= 2^s:
            s = idx + s / 2
            idx = idx
            continue 
        s = s / 2
        idx = s
        continue 
    return 0
}

function e_exp(uint256 arg1) payable {
    return ((18446744171133200623 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 12786308848809676358 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 4431393213333354933 * Mask(192, 64, uint64(arg1 << 64 / 12786308645202655660) * uint64(arg1 << 64 / 12786308645202655660)) >> 64) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 1023895807607063857 * Mask(192, 64, Mask(192, 64, uint64(arg1 << 64 / 12786308645202655660) * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 177331293418178780 * Mask(192, 64, Mask(192, 64, Mask(192, 64, uint64(arg1 << 64 / 12786308645202655660) * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 24779311982669544 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, uint64(arg1 << 64 / 12786308645202655660) * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)) + (Mask(192, 64, 2636551292259273 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, uint64(arg1 << 64 / 12786308645202655660) * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64 * uint64(arg1 << 64 / 12786308645202655660)) >> 64) >> 64 * 2^(Mask(192, 64, arg1 << 64 / 12786308645202655660) >> 64)))
}

function ln(uint256 arg1) payable {
    s = 95
    idx = 191
    while idx != 1:
        if Mask(192, 64, arg1) >> 64 >= 2^s:
            s = idx + s / 2
            idx = idx
            continue 
        s = s / 2
        idx = s
        continue 
    return ((Mask(192, 64, 277444915915471133247 * Mask(192, 0, arg1)) >> 64) + -(Mask(192, 64, 672797865977353252899 * Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64) >> 64) + (Mask(192, 64, 1342495486912798362956 * Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 2079982050276078403724 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 2513117219478940937138 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 2388947274873244002805 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 1796495340862302170357 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 1069452193429189189773 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 501541584095099868767 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 183176043153313066814 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 51045426652184553460 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 10488088993333923171 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 1498020070724751224 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + -(Mask(192, 64, 132863869502364569 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) + (Mask(192, 64, 5511900345305548 * Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 64, Mask(192, 0, arg1) * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64 * arg1) >> 64) >> 64) - 78667125315852878943 << 64 / 26613026195688644983)
}



}
